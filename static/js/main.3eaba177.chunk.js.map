{"version":3,"sources":["helper functions/nodesInShortestPath.jsx","PathFindingVisual/Node/Node.jsx","algorithms/bfs.jsx","algorithms/dfs.jsx","Heuristic/manhattan.jsx","Heuristic/chebyshev.jsx","Heuristic/octile.jsx","Heuristic/euclidean.jsx","algorithms/astar.jsx","algorithms/astar2.jsx","Maze/randomMazeGen.jsx","Maze/verticalMaze.jsx","Maze/recursiveDivision.jsx","PathFindingVisual/PathFinding.jsx","App.js","reportWebVitals.js","index.js"],"names":["nodesInShortestPath","parent","START_ROW","START_COL","END_ROW","END_COLUMN","end_row","end_col","nodesInShortestPathOrder","push","reverse","console","log","Node","props","state","this","isFinish","isStart","inPath","inPathFirst","inShortestPath","isWall","onMouseDown","onMouseEnter","onMouseUp","row","col","direction","extraClassName","arrowClassName","className","Component","Queue","items","element","length","shift","bfs","grid","NUMBER_OF_COL","NUMBER_OF_ROW","visitedNodesInOrder","visited","currentRow","queue","enqueue","isEmpty","front","dequeue","x","y","dfs","stack","topStack","pop","manhattan","END_COL","CUR_ROW","CUR_COL","Math","abs","chebyshev","dy","dx","max","octile","min","euclidean","pow","heuristic","currentHeuristic","QueueElement","priority","PriorityQueue","queueElement","added","i","splice","str","astar","cameFrom","vis","gScore","fScore","visitedNodes","goal","minFScoreNode","newx","newy","tent_score","position","g","h","f","other","return_path","current_node","path","current","undefined","astar2","start_node","end_node","yet_to_visit_list","visited_list","outer_iterations","move","current_index","index","item","max_iterations","alert","newyettovisitlist","indexxx","isEqual","childrens","indexx","new_position","nodeposition","new_node","child","includes","flag","j","randomMaze","newGrid","slice","walls","random","sort","randomNumber","floor","verticalMaze","rec","vertical","horizontal","number","generateOddRandomNumber","addWall","indexOf","dir","num","isStartFinish","tempWalls","temp","randomNum","generateRandomNumber","wall","array","recursiveDivision","PathFinding","displayMsg","setState","msgDisplay","msgOpacity","setTimeout","resetGrid","getInitialGrid","drawArrows","visualizeAlgo","clearPath","tempGrid","prevTime","performance","now","currentAlgo","animateAlgo","finalTime","timeTaken","generateMaze","currentMaze","mouseIsPressed","mousePressedTarget","mousePressedSource","getNewGridWithWallToggled","getNewGridWithTargetChanged","getNewGridWithSourceChanged","algo","animateShortestPath","node","style","marginBottom","Navbar","fontSize","collapseOnSelect","expand","bg","variant","Brand","href","Nav","Link","onClick","Toggle","aria-controls","Collapse","id","NavDropdown","title","Item","Button","map","rowIdx","nodeIdx","handleMouseUp","handleMouseDown","handleMouseEnter","class","display","opacity","isClearPath","gridArg","resetWall","isVisited","previousNode","createNode","distance","Infinity","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTA+BeA,EA/Ba,SAC1BC,EACAC,EACAC,EACAC,EACAC,GAQA,IAHA,IAAIC,EAAUF,EACVG,EAAUF,EACVG,EAA2B,GACxBF,IAAYJ,GAAaK,IAAYJ,GAC1CK,EAAyBC,KAAK,CAACH,EAASC,IACR,KAA5BN,EAAOK,GAASC,GAClBD,GAAW,EAC0B,KAA5BL,EAAOK,GAASC,GACzBD,GAAW,EAC0B,KAA5BL,EAAOK,GAASC,GACzBA,GAAW,EAEXA,GAAW,EAMf,OAHAC,EAAyBC,KAAK,CAACH,EAASC,IACxCC,EAAyBE,UACzBC,QAAQC,IAAIJ,GACLA,G,mECzBYK,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,0CAOnB,WACE,MAYIC,KAAKF,MAXPG,EADF,EACEA,SACAC,EAFF,EAEEA,QACAC,EAHF,EAGEA,OACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,eACAC,EANF,EAMEA,OACAC,EAPF,EAOEA,YACAC,EARF,EAQEA,aACAC,EATF,EASEA,UACAC,EAVF,EAUEA,IAAIC,EAVN,EAUMA,IACJC,EAXF,EAWEA,UAGEC,EAAiB,GACjBC,EAAiB,GAmCrB,OA7BIX,IACFU,EAAiB,UAEfT,IACFS,EAAiB,eAEfR,IACFQ,EAAiB,iBACF,KAAXD,IACFE,EAAiB,QAEJ,KAAXF,IACFE,EAAiB,MAEJ,KAAXF,IACFE,EAAiB,SAEJ,KAAXF,IACFE,EAAiB,SAGjBb,EACAY,EAAiB,WACVX,IACPW,EAAiB,WAEjBP,IACFO,EAAiB,UAEZ,qBAAKN,YAAa,kBAAMA,EAAYG,EAAKC,IAChDH,aAAc,kBAAMA,EAAaE,EAAKC,IAEtCF,UAAW,kBAAMA,KAAaM,UAAS,eAAUF,EAAV,YAA4BC,GAH5D,SAIL,qBAAKC,UAAS,WAAMD,W,GA/DQE,aCH5BC,G,iBACJ,aAAe,oBACbjB,KAAKkB,MAAQ,G,2CAIf,SAAQC,GACN,OAAOnB,KAAKkB,MAAMzB,KAAK0B,K,qBAIzB,WACE,GAAInB,KAAKkB,MAAME,OAAS,EACtB,OAAOpB,KAAKkB,MAAMG,U,qBAKtB,WACE,OAA6B,IAAtBrB,KAAKkB,MAAME,S,mBAIpB,WACEpB,KAAKkB,MAAQ,O,MA4FFI,EAzFH,SAACpC,EAAWC,EAAWC,EAASC,EAAYkC,EAAKC,EAAcC,GAOzE,IAJA,IAAIC,EAAsB,GAGtBC,EAAU,GACLjB,EAAM,EAAGA,EAAMe,EAAef,IAAO,CAE5C,IADA,IAAMkB,EAAa,GACVjB,EAAM,EAAGA,EAAMa,EAAeb,IACrCiB,EAAWnC,MAAK,GAElBkC,EAAQlC,KAAKmC,GAKf,IADA,IAAI3C,EAAS,GACJyB,EAAM,EAAGA,EAAMe,EAAc,EAAGf,IAAO,CAE9C,IADA,IAAMkB,EAAa,GACVjB,EAAM,EAAGA,EAAMa,EAAc,EAAGb,IACvCiB,EAAWnC,KAAK,KAElBR,EAAOQ,KAAKmC,GAId,IAAIC,EAAQ,IAAIZ,EAGhB,IAFAY,EAAMC,QAAQ,CAAC5C,EAAWC,IAC1BwC,EAAQzC,GAAWC,IAAa,EACN,GAAnB0C,EAAME,WAAoB,CAC/B,IAAMC,EAAQH,EAAMI,UAChBC,EAAIF,EAAM,GACVG,EAAIH,EAAM,GAEd,GADAN,EAAoBjC,KAAK,CAACyC,EAAGC,IACzBD,GAAK9C,GAAW+C,GAAK9C,EACvB,MAAO,CAAEJ,SAAQyC,uBAEfQ,EAAI,EAAIT,IAGe,GAArBF,EAFJW,GAAK,GAEOC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KACbR,EAAQO,GAAGC,IAAK,EAChBlD,EAAOiD,GAAGC,GAAK,IACfN,EAAMC,QAAQ,CAACI,EAAGC,KAGtBD,GAAK,GAEHA,EAAI,IAGmB,GAArBX,EAFJW,GAAK,GAEOC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KACbR,EAAQO,GAAGC,IAAK,EAChBlD,EAAOiD,GAAGC,GAAK,IACfN,EAAMC,QAAQ,CAACI,EAAGC,KAGtBD,GAAK,GAEHC,EAAI,EAAIX,IACVW,GAAK,EAEoB,GAArBZ,EAAKW,GAAGC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KACbR,EAAQO,GAAGC,IAAK,EAChBlD,EAAOiD,GAAGC,GAAK,IACfN,EAAMC,QAAQ,CAACI,EAAGC,KAGtBA,GAAK,GAEHA,EAAI,IACNA,GAAK,EAEoB,GAArBZ,EAAKW,GAAGC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KACbR,EAAQO,GAAGC,IAAK,EAChBlD,EAAOiD,GAAGC,GAAK,IACfN,EAAMC,QAAQ,CAACI,EAAGC,KAGtBA,GAAK,GAGT,MAAO,CAAElD,QAAQ,EAAGyC,wBCbPU,EApGH,SACVlD,EACAC,EACAC,EACAC,EACAkC,EACAC,EACAC,GAQA,IAJA,IAAIC,EAAsB,GAGtBC,EAAU,GACLjB,EAAM,EAAGA,GAAOe,EAAef,IAAO,CAE7C,IADA,IAAMkB,EAAa,GACVjB,EAAM,EAAGA,GAAOa,EAAeb,IACtCiB,EAAWnC,MAAK,GAElBkC,EAAQlC,KAAKmC,GAKf,IADA,IAAI3C,EAAS,GACJyB,EAAM,EAAGA,EAAMe,EAAgB,EAAGf,IAAO,CAEhD,IADA,IAAMkB,EAAa,GACVjB,EAAM,EAAGA,EAAMa,EAAgB,EAAGb,IACzCiB,EAAWnC,KAAK,KAElBR,EAAOQ,KAAKmC,GAKd,IAAIS,EAAQ,GAIZ,IAFAA,EAAM5C,KAAK,CAACP,EAAWC,IAEC,IAAjBkD,EAAMjB,QAAc,CACzB,IAAMkB,EAAWD,EAAME,MACnBL,EAAII,EAAS,GACbH,EAAIG,EAAS,GAKjB,GAHAX,EAAQO,GAAGC,IAAK,EAChBT,EAAoBjC,KAAK,CAACyC,EAAGC,IAEzBD,GAAK9C,GAAW+C,GAAK9C,EACvB,MAAO,CAAEJ,SAAQyC,uBAGfS,EAAI,IACNA,GAAK,EACoB,GAArBZ,EAAKW,GAAGC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KAEblD,EAAOiD,GAAGC,GAAK,IACfE,EAAM5C,KAAK,CAACyC,EAAGC,KAGnBA,GAAK,GAGHD,EAAI,EAAIT,IAEe,GAArBF,EADJW,GAAK,GACOC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KAEblD,EAAOiD,GAAGC,GAAK,IACfE,EAAM5C,KAAK,CAACyC,EAAGC,KAGnBD,GAAK,GAGHC,EAAI,EAAIX,IACVW,GAAK,EACoB,GAArBZ,EAAKW,GAAGC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KAEblD,EAAOiD,GAAGC,GAAK,IACfE,EAAM5C,KAAK,CAACyC,EAAGC,KAGnBA,GAAK,GAEHD,EAAI,IAEmB,GAArBX,EADJW,GAAK,GACOC,GAAG7B,QACQ,GAAjBqB,EAAQO,GAAGC,KAEblD,EAAOiD,GAAGC,GAAK,IACfE,EAAM5C,KAAK,CAACyC,EAAGC,KAGnBD,GAAK,GAGT,MAAO,CAAEjD,QAAS,EAAGyC,wBC7FRc,EALG,SAACpD,EAASqD,EAASC,EAASC,GAC1C,OAAOC,KAAKC,IAAIJ,EAAUE,GAAWC,KAAKC,IAAIzD,EAAUsD,ICO7CI,EARG,SAAC1D,EAASqD,EAASC,EAASC,GAC1C,IAAMI,EAAKH,KAAKC,IAAIJ,EAAQE,GACtBK,EAAKJ,KAAKC,IAAIzD,EAAQsD,GAE5B,OADiBE,KAAKK,IAAIF,EAAGC,ICKlBE,EARA,SAAC9D,EAASqD,EAASC,EAASC,GACvC,IAAMI,EAAKH,KAAKC,IAAIJ,EAAQE,GACtBK,EAAKJ,KAAKC,IAAIzD,EAAQsD,GAE5B,OADiB,MAASE,KAAKO,IAAIH,EAAGD,GAAOH,KAAKC,IAAIG,EAAGD,ICM9CK,EATG,SAAChE,EAASqD,EAASC,EAASC,GAC1C,IAAMT,EAAIU,KAAKC,IAAIzD,EAAQsD,GAASE,KAAKC,IAAIzD,EAAQsD,GAC/CP,EAAIS,KAAKC,IAAIJ,EAAQE,GAASC,KAAKC,IAAIJ,EAAQE,GAErD,OADUC,KAAKS,IAAInB,EAAEC,EAAE,KCGrBmB,EAAY,SAAClE,EAASqD,EAASC,EAASC,EAASY,GAGrD,MAAwB,aAApBA,EAEWf,EAAUpD,EAASqD,EAASC,EAASC,GAI5B,aAApBY,EACKT,EAAU1D,EAASqD,EAASC,EAASC,GAEtB,UAApBY,EACKL,EAAO9D,EAASqD,EAASC,EAASC,GAEnB,aAApBY,EACKH,EAAUhE,EAASqD,EAASC,EAASC,QAD9C,GAiBIa,EACJ,WAAYrC,EAASsC,GAAW,oBAC9BzD,KAAKmB,QAAUA,EACfnB,KAAKyD,SAAWA,GAIdC,E,WACJ,aAAe,oBACb1D,KAAKkB,MAAQ,G,2CAGf,SAAQC,EAASsC,GAGf,IAFA,IAAIE,EAAe,IAAIH,EAAarC,EAASsC,GACzCG,GAAQ,EACHC,EAAI,EAAGA,EAAI7D,KAAKkB,MAAME,OAAQyC,IACrC,GAAIF,EAAaF,SAAWzD,KAAKkB,MAAM2C,GAAGJ,SAAU,CAClDzD,KAAKkB,MAAM4C,OAAOD,EAAG,EAAGF,GACxBC,GAAQ,EACR,MAGCA,GACH5D,KAAKkB,MAAMzB,KAAKkE,K,qBAGpB,WAEE,OAAO3D,KAAKkB,MAAMG,U,qBAGpB,WACE,OAA0B,IAAtBrB,KAAKkB,MAAME,S,yBAIjB,WAEE,IADA,IAAI2C,EAAM,GACDF,EAAI,EAAGA,EAAI7D,KAAKkB,MAAME,OAAQyC,IACrCE,GAAO/D,KAAKkB,MAAM2C,GAAG1C,QAAU,IACjC,OAAO4C,M,KAyLIC,EAjLD,SACZ9E,EACAC,EACAC,EACAC,EACAkC,EACAC,EACAC,EACA8B,GAKA,IAHA,IAAI1B,EAAQ,IAAI6B,EACZO,EAAW,GACXC,EAAM,GACDxD,EAAM,EAAGA,EAAMe,EAAef,IAAO,CAE5C,IADA,IAAIkB,EAAa,GACRjB,EAAM,EAAGA,EAAMa,EAAeb,IACrCiB,EAAWnC,MAAK,GAElByE,EAAIzE,KAAKmC,GAIX,IADA,IAAI3C,EAAS,GACJyB,EAAM,EAAGA,EAAMe,EAAgB,EAAGf,IAAO,CAEhD,IADA,IAAMkB,EAAa,GACVjB,EAAM,EAAGA,EAAMa,EAAgB,EAAGb,IACzCiB,EAAWnC,KAAK,KAElBR,EAAOQ,KAAKmC,GAId,IADA,IAAIuC,EAAS,GACJzD,EAAM,EAAGA,EAAMe,EAAef,IAAO,CAE5C,IADA,IAAIkB,EAAa,GACRjB,EAAM,EAAGA,EAAMa,EAAeb,IACrCiB,EAAWnC,KAAK,KAElB0E,EAAO1E,KAAKmC,GAEduC,EAAOjF,GAAWC,GAAa,EAG/B,IADA,IAAIiF,EAAS,GACJ1D,EAAM,EAAGA,EAAMe,EAAef,IAAO,CAE5C,IADA,IAAIkB,EAAa,GACRjB,EAAM,EAAGA,EAAMa,EAAeb,IACrCiB,EAAWnC,KAAK,KAElB2E,EAAO3E,KAAKmC,GAGdwC,EAAOlF,GAAWC,GAAamE,EAC7BlE,EACAC,EACAH,EACAC,EACAoE,GAIF,IAAIc,EAAe,GACnBxC,EAAMC,QAAQ,CAAC5C,EAAWC,GAAYiF,EAAOlF,GAAWC,IACxD+E,EAAIhF,GAAWC,IAAa,EAG5B,IAFA,IAAMmF,EAAO,CAAClF,EAASC,IAEI,IAApBwC,EAAME,WAAqB,CAEhC,IAAIwC,EAAgB1C,EAAMI,UAAUd,QAGpC,GAAImD,EAAK,KAAOC,EAAc,IAAMD,EAAK,KAAOC,EAAc,GAI5D,OAFA5E,QAAQC,IAAIqE,GAEL,CAAEhF,SAAQoF,gBAEnB,IAAMnC,EAAIqC,EAAc,GAClBpC,EAAIoC,EAAc,GACxBF,EAAa5E,KAAK,CAACyC,EAAGC,IACtB,IAAIqC,EAAOtC,EAAI,EACXuC,EAAOtC,EACX,GAAIqC,EAAO/C,GACsB,GAA3BF,EAAKiD,GAAMC,GAAMnE,OAAiB,CACpC,IAAMoE,EAAaP,EAAOjC,GAAGC,GAAK,EAE9BuC,EAAaP,EAAOK,GAAMC,KAC5BR,EAAS,CAACO,EAAMC,IAAS,CAACvC,EAAGC,GAC7BgC,EAAOK,GAAMC,GAAQC,EACrBN,EAAOI,GAAMC,GACXN,EAAOK,GAAMC,GAAQnB,EAAUlE,EAASC,EAAYmF,EAAMC,EAAKlB,IACzC,IAApBW,EAAIM,GAAMC,KACZP,EAAIM,GAAMC,IAAQ,EAClBxF,EAAOuF,GAAMC,GAAQ,IACrB5C,EAAMC,QAAQ,CAAC0C,EAAMC,GAAOL,EAAOI,GAAMC,MAUjD,GADAA,EAAOtC,GADPqC,EAAOtC,EAAI,IAEC,GACqB,GAA3BX,EAAKiD,GAAMC,GAAMnE,OAAiB,CACpC,IAAMoE,EAAaP,EAAOjC,GAAGC,GAAK,EAC9BuC,EAAaP,EAAOK,GAAMC,KAC5BR,EAAS,CAACO,EAAMC,IAAS,CAACvC,EAAGC,GAC7BgC,EAAOK,GAAMC,GAAQC,EACrBN,EAAOI,GAAMC,GACXN,EAAOK,GAAMC,GAAQnB,EAAUlE,EAASC,EAAYmF,EAAMC,IACpC,IAApBP,EAAIM,GAAMC,KACZP,EAAIM,GAAMC,IAAQ,EAClBxF,EAAOuF,GAAMC,GAAQ,IACrB5C,EAAMC,QAAQ,CAAC0C,EAAMC,GAAOL,EAAOI,GAAMC,MAQjD,GAFAD,EAAOtC,GACPuC,EAAOtC,EAAI,IACC,GACqB,GAA3BZ,EAAKiD,GAAMC,GAAMnE,OAAiB,CACpC,IAAMoE,EAAaP,EAAOjC,GAAGC,GAAK,EAC9BuC,EAAaP,EAAOK,GAAMC,KAC5BR,EAAS,CAACO,EAAMC,IAAS,CAACvC,EAAGC,GAC7BgC,EAAOK,GAAMC,GAAQC,EACrBN,EAAOI,GAAMC,GACXN,EAAOK,GAAMC,GAAQnB,EAAUlE,EAASC,EAAYmF,EAAMC,IACpC,IAApBP,EAAIM,GAAMC,KACZP,EAAIM,GAAMC,IAAQ,EAClBxF,EAAOuF,GAAMC,GAAQ,IACrB5C,EAAMC,QAAQ,CAAC0C,EAAMC,GAAOL,EAAOI,GAAMC,MAQjD,GAFAD,EAAOtC,GACPuC,EAAOtC,EAAI,GACAX,GACsB,GAA3BD,EAAKiD,GAAMC,GAAMnE,OAAiB,CACpC,IAAMoE,EAAaP,EAAOjC,GAAGC,GAAK,EAC9BuC,EAAaP,EAAOK,GAAMC,KAC5BR,EAAS,CAACO,EAAMC,IAAS,CAACvC,EAAGC,GAC7BgC,EAAOK,GAAMC,GAAQC,EACrBN,EAAOI,GAAMC,GACXN,EAAOK,GAAMC,GAAQnB,EAAUlE,EAASC,EAAYmF,EAAMC,EAAKlB,IACzC,IAApBW,EAAIM,GAAMC,KACZP,EAAIM,GAAMC,IAAQ,EAClBxF,EAAOuF,GAAMC,GAAQ,IACrB5C,EAAMC,QAAQ,CAAC0C,EAAMC,GAAOL,EAAOI,GAAMC,OAcnD,MAAO,CAAExF,QAAS,EAAGoF,iBCzNjBxE,E,WACJ,WAAYZ,EAAQ0F,GAAW,oBAC7B3E,KAAKf,OAASA,EACde,KAAK2E,SAAWA,EAChB3E,KAAK4E,EAAI,EACT5E,KAAK6E,EAAI,EACT7E,KAAK8E,EAAI,E,2CAEX,SAAQC,GACN,OACE/E,KAAK2E,SAAS,KAAOI,EAAMJ,SAAS,IACpC3E,KAAK2E,SAAS,KAAOI,EAAMJ,SAAS,O,KAQpCK,EAAc,SAACC,EAAc1D,EAAME,EAAeD,GAYtD,IAXA,IAAI0D,EAAO,GASPC,EAAUF,OAEKG,IAAZD,GACLD,EAAKzF,KAAK0F,EAAQR,UAElBQ,EAAUA,EAAQlG,OAGpB,OAAOiG,GAgIMG,MA7HR,SACLnG,EACAC,EACAC,EACAC,EACAkC,EACAC,EACAC,EACA8B,GAEA,IAAI+B,EAAa,IAAIzF,OAAKuF,EAAW,CAAClG,EAAWC,IACjDmG,EAAWV,EAAI,EACfU,EAAWR,EAAI,EACfQ,EAAWT,EAAI,EAEf,IAAIU,EAAW,IAAI1F,OAAKuF,EAAW,CAAChG,EAASC,IAC7CkG,EAASX,EAAI,EACbW,EAAST,EAAI,EACbS,EAASV,EAAI,EAEb,IAAIW,EAAoB,GACpBC,EAAe,GAEf/D,EAAsB,GAE1B8D,EAAkB/F,KAAK6F,GAUvB,IARA,IAAII,EAAmB,EAEnBC,EAAO,CACT,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAE8B,IAA7BH,EAAkBpE,QAAc,CACrCsE,GAAoB,EAGpB,IAFA,IAAIT,EAAeO,EAAkB,GACjCI,EAAgB,EACX/B,EAAI,EAAGA,EAAI2B,EAAkBpE,OAAQyC,IAAK,CACjD,IAAIgC,EAAQhC,EACRiC,EAAON,EAAkB3B,GACzBiC,EAAKhB,EAAIG,EAAaH,IACxBG,EAAea,EACfF,EAAgBC,GAGpB,GAAIH,EAAmBK,IAErB,OADAC,MAAM,uBACC,CAACd,MAAM,EAAExD,uBAKlB,IADA,IAAIuE,EAAoB,GACfC,EAAU,EAAGA,EAAUV,EAAkBpE,OAAQ8E,IACpDA,IAAYN,GACdK,EAAkBxG,KAAK+F,EAAkBU,IAG7CV,EAAoB,GACpB,IAAK,IAAIU,EAAU,EAAGA,EAAUD,EAAkB7E,OAAQ8E,IACxDV,EAAkB/F,KAAKwG,EAAkBC,IAK3C,GAHAT,EAAahG,KAAKwF,GAGdM,EAASY,QAAQlB,GAGnB,MAAO,CAACC,KAAKF,EAAYC,GAAkDvD,uBAK7E,IAFA,IAAI0E,EAAY,GAEPC,EAAS,EAAGA,EAASV,EAAKvE,OAAQiF,IAAU,CACnD,IAAMC,EAAeX,EAAKU,GACtBE,EAAe,CACjBtB,EAAaN,SAAS,GAAK2B,EAAa,GACxCrB,EAAaN,SAAS,GAAK2B,EAAa,IAE1C,KACEC,EAAa,IAAM9E,GACnB8E,EAAa,GAAK,GAClBA,EAAa,IAAM/E,GACnB+E,EAAa,GAAK,KAKkC,IAAlDhF,EAAKgF,EAAa,IAAIA,EAAa,IAAIjG,OAA3C,CACA,IAAIkG,EAAW,IAAI3G,EAAKoF,EAAcsB,GACtCH,EAAU3G,KAAK+G,IAGjB,IAAK,IAAIH,EAAS,EAAGA,EAASD,EAAUhF,OAAQiF,IAAU,CACxD,IAAMI,EAAQL,EAAUC,GAExB,IAAIZ,EAAaiB,SAASD,GAA1B,CACAA,EAAM7B,EAAIK,EAAaL,EAAI,EAEzB6B,EAAM7B,EAAIhC,KAAKS,IAAIhE,EAAWoH,EAAM9B,SAAS,GAAG,GAAG/B,KAAKS,IAAIjE,EAAQqH,EAAM9B,SAAS,GAAG,GASxF8B,EAAM3B,EAAI2B,EAAM7B,EAAI6B,EAAM5B,EAE1B,IADA,IAAI8B,EAAO,EACFC,EAAI,EAAGA,EAAIpB,EAAkBpE,OAAQwF,IAAK,CACjD,IAAMzF,EAAUqE,EAAkBoB,GAClC,GAAKH,EAAMN,QAAQhF,IAAcsF,EAAM7B,GAAKzD,EAAQyD,EAAI,CACtD+B,EAAO,EACP,OAGS,IAATA,IAEFjF,EAAoBjC,KAAKgH,EAAM9B,UACjCa,EAAkB/F,KAAKgH,QCnJdI,MA/Cf,SACEtF,EACArC,EACAC,EACAC,EACAqD,EACAhB,EACAD,GAOA,IADA,IAAIsF,EAAUvF,EAAKwF,QACVrG,EAAM,EAAGA,EAAMe,EAAef,KACjCA,GAAOxB,GAAc,GAAKC,GAAaA,GAAaqC,EAAgB,KAEpEd,GAAOtB,GAAY,GAAKqD,GAAWA,GAAWjB,EAAgB,KAElEsF,EAAQpG,GAAK,GAAGJ,QAAS,EACzBwG,EAAQpG,GAAKc,EAAgB,GAAGlB,QAAS,GAE3C,IAAK,IAAIK,EAAM,EAAGA,EAAMa,EAAeb,KACjCA,GAAOxB,GAAc,GAAKD,GAAaA,GAAauC,EAAgB,KAEpEd,GAAO8B,GAAY,GAAKrD,GAAWA,GAAWqC,EAAgB,KAElEqF,EAAQ,GAAGnG,GAAKL,QAAS,EACzBwG,EAAQrF,EAAgB,GAAGd,GAAKL,QAAS,GAG3C,IADA,IAAI0G,EAAQ,GACHtG,EAAM,EAAGA,EAAMe,EAAef,IACrC,IAAK,IAAIC,EAAM,EAAGA,EAAMa,EAAeb,IAElCD,IAAQxB,GAAayB,IAAQxB,GAC7BuB,IAAQtB,GAAWuB,IAAQ8B,GAG1BG,KAAKqE,SAAW,MAClBD,EAAMvH,KAAK,CAACiB,EAAKC,IACjBmG,EAAQpG,GAAKC,GAAKL,QAAS,GAKjC,OADA0G,EAAME,MAAK,kBAAMtE,KAAKqE,SAAW,MAC1B,CAAED,QAAOF,YC7ClB,SAASK,EAAahE,EAAKF,GACvB,OAAOL,KAAKwE,MAAMxE,KAAKqE,UAAYhE,EAAME,GAAOA,GAGpD,ICFI6D,EDyDWK,EAvDM,SAAC9F,EAAKrC,EAAUC,EAAYC,EAASqD,EAAQhB,EAAcD,GAE5E,IADA,IAAIsF,EAAUvF,EAAKwF,QACVrG,EAAM,EAAGA,EAAMe,EAAef,KAC/BA,GAAKxB,GAAc,GAAGC,GAAaA,GAAWqC,EAAc,KAC5Dd,GAAKtB,GAAY,GAAGqD,GAAWA,GAASjB,EAAc,KAC1DsF,EAAQpG,GAAK,GAAGJ,QAAS,EACzBwG,EAAQpG,GAAKc,EAAc,GAAGlB,QAAS,GAE3C,IAAK,IAAIK,EAAM,EAAGA,EAAMa,EAAeb,KAC/BA,GAAKxB,GAAc,GAAGD,GAAaA,GAAWuC,EAAc,KAC5Dd,GAAK8B,GAAY,GAAGrD,GAAWA,GAAUqC,EAAc,KAC3DqF,EAAQ,GAAGnG,GAAKL,QAAO,EACvBwG,EAAQrF,EAAc,GAAGd,GAAKL,QAAO,GAEzC,IAAK,IAAII,EAAI,EAAEA,EAAIe,EAAcf,IAE7B,GAAIA,EAAI,IAAI,EAAZ,CACA,IAAIuG,EAASE,EAAa,EAAE3F,GAC5B,GAAId,IAAMxB,GAAawB,IAAMtB,EAAQ,CACjC,GAAIF,IAAYE,EAAQ,CACpB,IAAK,IAAIuB,EAAI,EAAEA,EAAIa,EAAcb,IACzBA,IAAMxB,GAAawB,IAAM8B,IAEzBqE,EAAQpG,GAAKC,GAAKL,QAAS,GAInC,SAEJ,KAAM2G,IAAS9H,GAAa8H,IAASxE,GACjCwE,EAASE,EAAa,EAAE3F,GAchC,IAAK,IAAIb,EAAI,EAAEA,EAAIa,EAAcb,IACzBA,IAAMsG,IAENH,EAAQpG,GAAKC,GAAKL,QAAS,GAKvC,OAAOwG,G,QCfX,IAAMQ,EAAM,SAANA,EACJC,EACAC,EACAjG,EACArC,EACAC,EACAC,EACAqD,GAEA,KAAI8E,EAASnG,OAAS,GAAKoG,EAAWpG,OAAS,GAA/C,CAGA,IAAIR,EAAY,EACZ6G,EAAS,EACTF,EAASnG,OAASoG,EAAWpG,QAC/BR,EAAY,EACZ6G,EAASC,EAAwBH,KAEjC3G,EAAY,EACZ6G,EAASC,EAAwBF,IAEjB,IAAd5G,GACF+G,EACE/G,EACA6G,EACAlG,EACAgG,EACAC,EACAtI,EACAC,EACAC,EACAqD,GAEF6E,EACEC,EAASR,MAAM,EAAGQ,EAASK,QAAQH,IACnCD,EACAjG,EACArC,EACAC,EACAC,EACAqD,GAEF6E,EACEC,EAASR,MAAMQ,EAASK,QAAQH,GAAU,GAC1CD,EACAjG,EACArC,EACAC,EACAC,EACAqD,KAGFkF,EACE/G,EACA6G,EACAlG,EACAgG,EACAC,EACAtI,EACAC,EACAC,EACAqD,GAEF6E,EACEC,EACAC,EAAWT,MAAM,EAAGS,EAAWI,QAAQH,IACvClG,EACArC,EACAC,EACAC,EACAqD,GAEF6E,EACEC,EACAC,EAAWT,MAAMS,EAAWI,QAAQH,GAAU,GAC9ClG,EACArC,EACAC,EACAC,EACAqD,MAKN,SAASkF,EACPE,EACAC,EACAvG,EACAgG,EACAC,EACAtI,EACAC,EACAC,EACAqD,GAEA,IAAIsF,GAAgB,EAChBC,EAAY,GAChB,GAAY,IAARH,EAAW,CACb,GAA0B,IAAtBL,EAAWpG,OAAc,OADhB,oBAEIoG,GAFJ,IAEb,2BAA6B,CAAC,IAArBS,EAAoB,QAExBA,IAAS/I,GAAa4I,IAAQ3I,GAC9B8I,IAAS7I,GAAW0I,IAAQrF,EAE7BsF,GAAgB,EAGlBC,EAAUvI,KAAK,CAACwI,EAAMH,KAVX,mCAYR,CACL,GAAwB,IAApBP,EAASnG,OAAc,OADtB,oBAEYmG,GAFZ,IAEL,2BAA2B,CAAC,IAAnBU,EAAkB,QAEtBA,IAAS/I,GAAa4I,IAAQ3I,GAC9B8I,IAAS7I,GAAW0I,IAAQrF,EAE7BsF,GAAgB,EAGlBC,EAAUvI,KAAK,CAACqI,EAAKG,KAVlB,+BAaFF,GACHC,EAAUlE,OAYd,SAA8Bb,GAC5B,IAAIiF,EACFtF,KAAKwE,MAAMxE,KAAKqE,UAAYhE,EAAM,IAClCL,KAAKwE,MAAMxE,KAAKqE,UAAYhE,EAAM,IAChCiF,EAAY,IAAM,IAChBA,IAAcjF,EAChBiF,GAAa,EAEbA,GAAa,GAGjB,OAAOA,EAvBYC,CAAqBH,EAAU5G,QAAS,GAE3D,cAAiB4G,EAAjB,eAA4B,CAAvB,IAAII,EAAI,KACXpB,EAAMvH,KAAK2I,QACChD,GAARgD,IAIJ7G,EAAK6G,EAAK,IAAIA,EAAK,IAAI9H,QAAS,IAiBpC,SAASoH,EAAwBW,GAC/B,IAAIpF,EAAMoF,EAAMjH,OAAS,EACrB8G,EACFtF,KAAKwE,MAAMxE,KAAKqE,UAAYhE,EAAM,IAClCL,KAAKwE,MAAMxE,KAAKqE,UAAYhE,EAAM,IAQpC,OAPIiF,EAAY,IAAM,IAChBA,IAAcjF,EAChBiF,GAAa,EAEbA,GAAa,GAGVG,EAAMH,GAGAI,MAzMf,SACE/G,EACArC,EACAC,EACAC,EACAqD,EACAhB,EACAD,GAKA,IAHA,IAAI+F,EAAW,GACXC,EAAa,GAER9G,EAAM,EAAGA,EAAMa,EAAKH,OAAQV,IAAO8G,EAAW/H,KAAKiB,GAC5D,IAAK,IAAIC,EAAM,EAAGA,EAAMY,EAAK,GAAGH,OAAQT,IAAO4G,EAAS9H,KAAKkB,GAC7D,IAAK,IAAID,EAAM,EAAGA,EAAMe,EAAef,KACjCA,GAAOxB,GAAc,GAAKC,GAAaA,GAAaqC,EAAgB,KAEpEd,GAAOtB,GAAY,GAAKqD,GAAWA,GAAWjB,EAAgB,KAElED,EAAKb,GAAK,GAAGJ,QAAS,EACtBiB,EAAKb,GAAKc,EAAgB,GAAGlB,QAAS,GAExC,IAAK,IAAIK,EAAM,EAAGA,EAAMa,EAAeb,KACjCA,GAAOxB,GAAc,GAAKD,GAAaA,GAAauC,EAAgB,KAEpEd,GAAO8B,GAAY,GAAKrD,GAAWA,GAAWqC,EAAgB,KAElEF,EAAK,GAAGZ,GAAKL,QAAS,EACtBiB,EAAKE,EAAgB,GAAGd,GAAKL,QAAS,GAOxC,OALAkB,GAAiB,EACjBC,GAAiB,EACjBuF,EAAQ,GACRM,EAAIC,EAAUC,EAAYjG,EAAMrC,EAAWC,EAAWC,EAASqD,GAC/D9C,QAAQC,IAAI,OAAQ2B,GACbA,GCfLrC,EAAY,GACZC,EAAY,GACZC,EAAU,GACVC,EAAa,GAEXoC,EAAgB,GAChBD,EAAgB,GAED+G,E,kDACnB,WAAYzI,GAAQ,IAAD,8BACjB,cAAMA,IA6ER0I,WAAa,WAEX,EAAKC,SAAS,CAACC,WAAW,QAASC,WAAW,IAC9CC,YAAW,WACT,EAAKH,SAAS,CAACC,WAAW,OAAQC,WAAW,MAC7C,MAnFe,EAkJnBE,UAAY,WACV,IAAMtH,EAAOuH,GAAe,EAAO,IAAG,GACtC,EAAKL,SAAS,CAAElH,UApJC,EAuJnBwH,WAAa,SAAC9J,GAIZ,IAFA,IAAIK,EAAUF,EACVG,EAAUF,EACPC,IAAYJ,GAAaK,IAAYJ,GAK1C,GAAgC,KAA5BF,EAAOK,GAASC,GAAiB,CAEnC,GADAD,GAAW,EACPC,IAAYJ,GAAaG,IAAYJ,EACvC,MAEF,IAAI4H,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASqB,UAAY,IACtC,EAAK6H,SAAS,CAAE3B,iBACX,GAAgC,KAA5B7H,EAAOK,GAASC,GAAiB,CAE1C,GADAD,GAAW,EACPC,IAAYJ,GAAaG,IAAYJ,EACvC,MAEF,IAAI4H,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASqB,UAAY,IACtC,EAAK6H,SAAS,CAAE3B,iBACX,GAAgC,KAA5B7H,EAAOK,GAASC,GAAiB,CAE1C,IADAA,GAAW,KACKJ,GAAaG,IAAYJ,EACvC,MAEF,IAAI4H,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASqB,UAAY,IACtC,EAAK6H,SAAS,CAAE3B,gBACX,CAEL,IADAvH,GAAW,KACKJ,GAAaG,IAAYJ,EACvC,MAEF,IAAI4H,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASqB,UAAY,IACtC,EAAK6H,SAAS,CAAE3B,cA/LH,EAoMnB7H,QAAU,EApMS,EAqMnB+J,cAAgB,WACd,EAAKC,YACL,IAAIC,EAAW,EAAKnJ,MAAMwB,KAC1B2H,EAAShK,GAAWC,GAAWmB,QAAO,EACtC4I,EAAS9J,GAASC,GAAYiB,QAAO,EACrC,IAAM6I,EAAWC,YAAYC,MAE7B,GAA6B,WAAzB,EAAKtJ,MAAMuJ,YAAuB,CACpC,IAAM/F,EAAmB,EAAKxD,MAAMwD,iBAEpC,EAAmC8B,EAAOnG,EACxCC,EACAC,EACAC,EACA,EAAKU,MAAMwB,KACXC,EACAC,EACA8B,GAPK2B,EAAP,EAAOA,KAAKxD,EAAZ,EAAYA,oBASV/B,QAAQC,IAAIsF,GACZvF,QAAQC,IAAI8B,GACZ,EAAK6H,YAAY7H,EAAqBwD,EAAM,OAIhD,GAA+B,UAA3B,EAAKnF,MAAMuJ,YAAyB,CAEtCtD,MAAM,kBACN,IAAMzC,EAAmB,EAAKxD,MAAMwD,iBACpC,EAAiCS,EAC/B9E,EACAC,EACAC,EACAC,EACA,EAAKU,MAAMwB,KACXC,EACAC,EACA8B,GARMtE,EAAR,EAAQA,OAAQoF,EAAhB,EAAgBA,aAUVmF,EAAYJ,YAAYC,MAC9B,EAAKZ,SAAS,CAACgB,UAAWD,EAAUL,IAEpC,IAAI3J,EAA2B,IAEf,IAAZP,QAA2BmG,GAAVnG,IACnBO,EAA2BR,EACzBC,EACAC,EACAC,EACAC,EACAC,GAEF,EAAK0J,WAAW9J,IAElB,EAAKsK,YAAYlF,EAAc7E,EAA0B,OAE3D,GAA8B,OAA1B,EAAKO,MAAMuJ,YAAsB,CAGnC,MAAsChI,EACpCpC,EACAC,EACAC,EACAC,EACA,EAAKU,MAAMwB,KACXC,EACAC,GAPIxC,EAAN,EAAMA,OAAQyC,EAAd,EAAcA,oBAUR8H,EAAYJ,YAAYC,MAC9B,EAAKZ,SAAS,CAACgB,UAAWD,EAAUL,IACpC,IAAI3J,GAA4B,GAChB,IAAZP,IACFO,EAA2BR,EACzBC,EACAC,EACAC,EACAC,EACAC,GAEF,EAAK0J,WAAW9J,IAElB,EAAKsK,YAAY7H,EAAqBlC,EAA0B,YAC3D,GAA+B,QAA3B,EAAKO,MAAMuJ,YAAuB,CAC3C3J,QAAQC,IAAI,UACZ,MAAsCwC,EACpClD,EACAC,EACAC,EACAC,EACA,EAAKU,MAAMwB,KACXC,EACAC,GAPIxC,EAAN,EAAMA,OAAQyC,EAAd,EAAcA,oBASR8H,EAAYJ,YAAYC,MAC9B,EAAKZ,SAAS,CAACgB,UAAWD,EAAUL,KAGpB,IAAZlK,IACyBD,EACzBC,EACAC,EACAC,EACAC,EACAC,GAEF,EAAK0J,WAAW9J,IAElB,EAAKsK,YAAY7H,EAAqBA,EAAqB,SAjT5C,EAqTnBuH,UAAY,WACV,EAAKR,SAAS,CAAElH,KAAMuH,GAAe,EAAM,EAAK/I,MAAMwB,MAAK,MAtT1C,EAyTnBmI,aAAe,SAACC,GACd,IAAIT,EAAW,EAAKnJ,MAAMwB,KAa1B,GAZA2H,EAAShK,GAAWC,GAAWe,SAAU,EAEzCf,EAAY,EACZ+J,EAFAhK,EAAY,GAEQC,GAAWe,SAAU,EACzCgJ,EAAS9J,GAASC,GAAYY,UAAS,EACvCZ,EAAamC,GAEb0H,EADA9J,EAAUqC,IACQpC,GAAYY,UAAS,EACvC,EAAKwI,SAAS,CAAClH,KAAK2H,IACpB,EAAKT,SAAS,CAAElH,KAAMuH,GAAe,EAAM,EAAK/I,MAAMwB,MAAK,KAGzC,WAAdoI,EAAuB,CACzB,IAAM7C,EAAUwB,EAAkB,EAAKvI,MAAMwB,KAAKrC,EAAUC,EAAYC,EAASC,EAAWoC,EAAcD,GAC1G,EAAKiH,SAAS,CAAClH,KAAKuF,IAEtB,GAAkB,eAAd6C,EAA2B,CAC7B,MAAsB9C,EAAW,EAAK9G,MAAMwB,KAAKrC,EAAUC,EAAYC,EAASC,EAAWoC,EAAcD,GAA9FsF,GAAX,EAAKE,MAAL,EAAWF,SACX,EAAK2B,SAAS,CAAClH,KAAKuF,IAEtB,GAAkB,iBAAd6C,EAA6B,CAC/B,IAAM7C,EAAUO,EAAa,EAAKtH,MAAMwB,KAAKrC,EAAUC,EAAYC,EAASC,EAAWoC,EAAcD,GACrG,EAAKiH,SAAS,CAAClH,KAAKuF,IAEtB,GAAkB,aAAd6C,EAAyB,CAC3B,IAAM7C,EAAUO,EAAa,EAAKtH,MAAMwB,KAAKrC,EAAUC,EAAYC,EAASC,EAAWoC,EAAcD,GACrG,EAAKiH,SAAS,CAAClH,KAAKuF,MAnVtB,EAAK/G,MAAQ,CACXwB,KAAM,GACNqI,gBAAgB,EAChBN,YAAa,MACbO,oBAAoB,EACpBC,oBAAoB,EACpBvG,iBAAkB,YAClBmF,WAAY,OACZC,WAAY,EACZc,UAAW,EACXE,YAAa,UAZE,E,qDAgBnB,WACE,IAAMpI,EAAOuH,GAAe,EAAO,IAAG,GACtC9I,KAAKyI,SAAS,CAAElH,W,6BAIlB,SAAgBb,EAAKC,GAEnB,GADAX,KAAKiJ,YACDvI,IAAQtB,GAAWuB,IAAQtB,EAI/B,GAAIqB,IAAQxB,GAAayB,IAAQxB,EAAjC,CAKA,IAAM2H,EAAUiD,EAA0B/J,KAAKD,MAAMwB,KAAMb,EAAKC,GAC5DA,IAAQtB,GAAcqB,IAAQtB,EAChCY,KAAKyI,SAAS,CAAElH,KAAMvB,KAAKD,MAAMwB,KAAMqI,gBAAgB,IAEvD5J,KAAKyI,SAAS,CAAElH,KAAMuF,EAAS8C,gBAAgB,SAR/C5J,KAAKyI,SAAS,CAAEqB,oBAAoB,SAJpC9J,KAAKyI,SAAS,CAAEoB,oBAAoB,M,8BAexC,SAAiBnJ,EAAKC,GAEpB,IAAsC,IAAlCX,KAAKD,MAAM8J,mBAA6B,CAC1C,GAAInJ,IAAQxB,GAAayB,IAAQxB,EAC/B,OAEF,IAAM2H,EAAUkD,EAA4BhK,KAAKD,MAAMwB,KAAMb,EAAKC,GAIlE,OAHAX,KAAKyI,SAAS,CAAElH,KAAMuF,IACtBzH,EAAasB,OACbvB,EAAUsB,GAIZ,IAAsC,IAAlCV,KAAKD,MAAM+J,mBAA6B,CAC1C,GAAIpJ,IAAQtB,GAAWuB,IAAQtB,EAC7B,OAEF,IAAMyH,EAAUmD,EAA4BjK,KAAKD,MAAMwB,KAAMb,EAAKC,GAIlE,OAHAX,KAAKyI,SAAS,CAAElH,KAAMuF,IACtB3H,EAAYwB,OACZzB,EAAYwB,GAGd,GAAKV,KAAKD,MAAM6J,iBACZjJ,IAAQtB,GAAcqB,IAAQtB,GAAlC,CAGA,IAAM0H,EAAUiD,EAA0B/J,KAAKD,MAAMwB,KAAMb,EAAKC,GAChEX,KAAKyI,SAAS,CAAElH,KAAMuF,O,2BAExB,WAEE9G,KAAKyI,SAAS,CACZmB,gBAAgB,EAChBC,oBAAoB,EACpBC,oBAAoB,M,yBAUxB,SAAYpI,EAAqBlC,EAA0B0K,GACzD,IADgE,IAAD,kBACtDrG,GACP,GAAIA,IAAMnC,EAAoBN,OAC5B,OAAkC,IAA9B5B,IAGJ,EAAKgJ,aACQ,QAAT0B,EAEFtB,YAAW,WACT,EAAKuB,oBAAoBzI,KACxB,EAAImC,GAEP+E,YAAW,WACT,EAAKuB,oBAAoB3K,KACxB,EAAIqE,GAET+E,YAAW,WACT,EAAKuB,oBAAoB3K,KACxB,EAAIqE,IAfC,CAAN,UAmBJ+E,YAAW,WACT,IAAMwB,EAAO1I,EAAoBmC,GAC3BvE,EAAU8K,EAAK,GACf7K,EAAU6K,EAAK,GACjBtD,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASa,aAAc,EACxC,EAAKqI,SAAS,CAAE3B,cACf,GAAGjD,GACN+E,YAAW,WACT,IAAMwB,EAAO1I,EAAoBmC,GAC3BvE,EAAU8K,EAAK,GACf7K,EAAU6K,EAAK,GACjBtD,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASa,aAAc,EACxC0G,EAAQxH,GAASC,GAASY,QAAS,EAEnC,EAAKsI,SAAS,CAAE3B,cACf,GAAKjD,IAvCDA,EAAI,EAAGA,GAAKnC,EAAoBN,OAAQyC,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,iCA4CxD,SAAoBrE,GAClB,IAD6C,IAAD,kBACnCqE,GACP+E,YAAW,WACT,IAAMwB,EAAO5K,EAAyBqE,GAChCvE,EAAU8K,EAAK,GACf7K,EAAU6K,EAAK,GACjBtD,EAAU,EAAK/G,MAAMwB,KACzBuF,EAAQxH,GAASC,GAASa,aAAc,EACxC0G,EAAQxH,GAASC,GAASY,QAAS,EACnC2G,EAAQxH,GAASC,GAASc,gBAAiB,EAC3C,EAAKoI,SAAS,CAAE3B,cACf,GAAKjD,IAVDA,EAAI,EAAGA,EAAIrE,EAAyB4B,OAAQyC,IAAM,EAAlDA,K,oBAiOX,WAAU,IAAD,OACP,EAAiC7D,KAAKD,MAAxB6J,GAAd,EAAQrI,KAAR,EAAcqI,gBACd,OACE,sBAAK7I,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAUsJ,MAAO,CAAEC,aAAc,IAAhD,SACE,qBAAKvJ,UAAU,UAAf,SACE,eAACwJ,EAAA,EAAD,CAAQF,MAAO,CAACG,SAAS,IAAKC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAA7E,UACE,cAACL,EAAA,EAAOM,MAAR,CACER,MAAO,CAACG,SAAS,IACjBM,KAAK,QAFP,4BAOA,cAACC,EAAA,EAAIC,KAAL,CAEEC,QAAS,kBAAM,EAAKpC,aAFtB,wBAMA,cAACkC,EAAA,EAAIC,KAAL,CAEEC,QAAS,kBAAM,EAAKhC,aAFtB,wBAQA,cAACsB,EAAA,EAAOW,OAAR,CAAeC,gBAAc,0BAC7B,eAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,wBAApB,UACE,eAACN,EAAA,EAAD,CAAKhK,UAAU,UAAf,UAIE,eAACuK,EAAA,EAAD,CAEEC,MAAM,gBACNF,GAAG,0BAHL,UAME,cAACC,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKvB,aAAa,WADnC,qCAKA,cAAC4B,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKvB,aAAa,eADnC,yBAKA,cAAC4B,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKvB,aAAa,iBADnC,oCAKA,cAAC4B,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKvB,aAAa,aADnC,yCASF,eAAC4B,EAAA,EAAD,CACEC,MAAM,aACNF,GAAG,0BAFL,UAKE,cAACC,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKxC,SAAS,CAAEa,YAAa,SAD9C,iCAKA,cAACgC,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKxC,SAAS,CAAEa,YAAa,SAD9C,gCAKA,cAACgC,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKxC,SAAS,CAAEa,YAAa,YAD9C,gBAKA,cAACgC,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAM,EAAKxC,SAAS,CAAEa,YAAa,cAD9C,yBAMF,eAACgC,EAAA,EAAD,CACEC,MAAK,qBAAgBvL,KAAKD,MAAMwD,kBAChC8H,GAAG,0BAFL,UAKE,cAACC,EAAA,EAAYE,KAAb,CACEP,QAAS,kBACP,EAAKxC,SAAS,CAAElF,iBAAkB,eAFtC,uBAOA,cAAC+H,EAAA,EAAYE,KAAb,CACEP,QAAS,kBACP,EAAKxC,SAAS,CAAElF,iBAAkB,eAFtC,uBAOA,cAAC+H,EAAA,EAAYE,KAAb,CACEP,QAAS,kBACP,EAAKxC,SAAS,CAAElF,iBAAkB,YAFtC,oBAOA,cAAC+H,EAAA,EAAYE,KAAb,CACEP,QAAS,kBACP,EAAKxC,SAAS,CAAElF,iBAAkB,eAFtC,0BAQF,eAACkI,EAAA,EAAD,CAEFR,QAAS,kBAAM,EAAKjC,iBAFlB,uBAKShJ,KAAKD,MAAMuJ,kBAGtB,cAACyB,EAAA,EAAD,cAKR,qBAAKhK,UAAU,OAAf,SACGf,KAAKD,MAAMwB,KAAKmK,KAAI,SAAChL,EAAKiL,GACzB,OACE,8BACGjL,EAAIgL,KAAI,SAACtB,EAAMwB,GACd,IACElL,EASE0J,EATF1J,IACAC,EAQEyJ,EARFzJ,IACAV,EAOEmK,EAPFnK,SACAC,EAMEkK,EANFlK,QACAI,EAKE8J,EALF9J,OACAH,EAIEiK,EAJFjK,OACAC,EAGEgK,EAHFhK,YACAC,EAEE+J,EAFF/J,eACAO,EACEwJ,EADFxJ,UAEF,OACE,cAAC,EAAD,CACEA,UAAWA,EAEXD,IAAKA,EACLV,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,eAAgBA,EAChBC,QAAQL,IAAYC,GAAkBI,EACtCG,UAAW,kBAAM,EAAKoL,iBACtBjC,eAAgBA,EAChBrJ,YAAa,SAACG,EAAKC,GAAN,OAAc,EAAKmL,gBAAgBpL,EAAKC,IACrDH,aAAc,SAACE,EAAKC,GAAN,OACZ,EAAKoL,iBAAiBrL,EAAKC,IAE7BD,IAAKA,GAdAkL,OAhBHD,QAsChB,sBAAKK,MAAM,UAAU3B,MAAO,CAAC4B,QAAQjM,KAAKD,MAAM2I,WAAYwD,QAASlM,KAAK2I,WAAY6B,SAAS,IAA/F,yBAAiH5H,KAAKwE,MAAMpH,KAAKD,MAAM0J,WAAvI,gB,GAvhBiCzI,aAgiBnC8H,EAAiB,SAACqD,EAAaC,EAASC,GAC5C,GAAIF,EAAa,CAEf,IADA,IAAI5K,EAAO6K,EACF1L,EAAM,EAAGA,EAAMe,EAAef,IACrC,IAAK,IAAIC,EAAM,EAAGA,EAAMa,EAAeb,IAGrCY,EAAKb,GAAKC,GAAK2L,WAAY,EACvBD,IACF9K,EAAKb,GAAKC,GAAKL,QAAU,GAG3BiB,EAAKb,GAAKC,GAAK4L,aAAe,KAC9BhL,EAAKb,GAAKC,GAAKR,QAAS,EACxBoB,EAAKb,GAAKC,GAAKP,aAAc,EAC7BmB,EAAKb,GAAKC,GAAKN,gBAAiB,EAChCkB,EAAKb,GAAKC,GAAKC,UAAY,GAG/B,OAAOW,EAGT,IADA,IAAMA,EAAO,GACJb,EAAM,EAAGA,EAAMe,EAAef,IAAO,CAE5C,IADA,IAAMkB,EAAa,GACVjB,EAAM,EAAGA,EAAMa,EAAeb,IACrCiB,EAAWnC,KAAK+M,EAAW7L,EAAKD,EAAKyL,IAEvC5K,EAAK9B,KAAKmC,GAEZ,OAAOL,GAGHiL,EAAa,SAAC7L,EAAKD,EAAKyL,GAC5B,MAAO,CACLxL,MACAD,MACAR,QAASQ,IAAQxB,GAAayB,IAAQxB,EACtCc,SAAUS,IAAQtB,GAAWuB,IAAQtB,EACrCoN,SAAUC,IACVJ,WAAW,EACXhM,QAAQ,EACRiM,aAAc,KACdpM,QAAQ,EACRC,aAAa,EACbC,gBAAgB,EAChBO,UAAW,KAIToJ,EAA8B,SAACzI,EAAMb,EAAKC,GAC9C,IAAMmG,EAAUvF,EAAKwF,QAIrB,OAHAD,EAAQ1H,GAASC,GAAYY,UAAW,EAExC6G,EAAQpG,GAAKC,GAAKV,UAAW,EACtB6G,GAGHmD,EAA8B,SAAC1I,EAAMb,EAAKC,GAC9C,IAAMmG,EAAUvF,EAAKwF,QAIrB,OAHAD,EAAQ5H,GAAWC,GAAWe,SAAU,EAExC4G,EAAQpG,GAAKC,GAAKT,SAAU,EACrB4G,GAGHiD,EAA4B,SAACxI,EAAMb,EAAKC,GAC5C,IAAMmG,EAAUvF,EAAKwF,QACfqD,EAAOtD,EAAQpG,GAAKC,GACpBgM,EAAO,2BACRvC,GADQ,IAEX9J,QAAS8J,EAAK9J,SAGhB,OADAwG,EAAQpG,GAAKC,GAAOgM,EACb7F,GC5nBM8F,OAVf,WACE,OACE,qBAAK7L,UAAU,MAAf,SACE,8BACE,cAAC,EAAD,SCMO8L,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.3eaba177.chunk.js","sourcesContent":["const nodesInShortestPath = (\r\n  parent,\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COLUMN\r\n) => {\r\n  // with the help of this function and the parent 2D array, we get the path from the source to the destination\r\n  // in the order\r\n\r\n  let end_row = END_ROW;\r\n  let end_col = END_COLUMN;\r\n  let nodesInShortestPathOrder = [];\r\n  while (end_row !== START_ROW || end_col !== START_COL) {\r\n    nodesInShortestPathOrder.push([end_row, end_col]);\r\n    if (parent[end_row][end_col] == \"U\") {\r\n      end_row -= 1;\r\n    } else if (parent[end_row][end_col] == \"D\") {\r\n      end_row += 1;\r\n    } else if (parent[end_row][end_col] == \"L\") {\r\n      end_col -= 1;\r\n    } else {\r\n      end_col += 1;\r\n    }\r\n  }\r\n  nodesInShortestPathOrder.push([end_row, end_col]);\r\n  nodesInShortestPathOrder.reverse();\r\n  console.log(nodesInShortestPathOrder);\r\n  return nodesInShortestPathOrder;\r\n};\r\n\r\nexport default nodesInShortestPath;\r\n","import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  // componentDidMount()\r\n\r\n  render() {\r\n    const {\r\n      isFinish,\r\n      isStart,\r\n      inPath,\r\n      inPathFirst,\r\n      inShortestPath,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,col,\r\n      direction\r\n    } = this.props;\r\n\r\n    let extraClassName = \"\";\r\n    let arrowClassName = \"\";\r\n    // console.log(this.props);\r\n    // if (isFinishNode){\r\n    //     extraClassName = isFinishNode\r\n    // }\r\n    // console.log(isFinishNode)\r\n    if (inPath) {\r\n      extraClassName = \"inPath\";\r\n    }\r\n    if (inPathFirst) {\r\n      extraClassName = \"inPathFirst\";\r\n    }\r\n    if (inShortestPath) {\r\n      extraClassName = \"inShortestPath\";\r\n      if (direction==\"U\"){\r\n        arrowClassName = \"down\";\r\n      }\r\n      if (direction==\"D\"){\r\n        arrowClassName = \"up\";\r\n      }\r\n      if (direction==\"L\"){\r\n        arrowClassName = \"right\";\r\n      }\r\n      if (direction==\"R\"){\r\n        arrowClassName = \"left\";\r\n      }\r\n    }\r\n    if (isFinish) {\r\n        extraClassName = \"isFinish\";\r\n    } else if (isStart) {\r\n        extraClassName = \"isStart\";\r\n    }\r\n    if (isWall) {\r\n      extraClassName = \"isWall\";\r\n    }\r\n    return <div onMouseDown={() => onMouseDown(row, col)}\r\n    onMouseEnter={() => onMouseEnter(row, col)}\r\n    // draggable={true?extraClassName===\"isFinish\":false}\r\n    onMouseUp={() => onMouseUp()} className={`node ${extraClassName} ${arrowClassName}` }>\r\n      <div className={` ${arrowClassName}`}></div>\r\n      {/* <div\r\n      className = {`innode ${extraClassName} ${arrowClassName}`}\r\n      ></div> */}\r\n    </div>;\r\n  }\r\n}\r\n","class Queue {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n\r\n  // add element to the queue\r\n  enqueue(element) {\r\n    return this.items.push(element);\r\n  }\r\n\r\n  // remove element from the queue\r\n  dequeue() {\r\n    if (this.items.length > 0) {\r\n      return this.items.shift();\r\n    }\r\n  }\r\n\r\n  // check if the queue is empty\r\n  isEmpty() {\r\n    return this.items.length === 0;\r\n  }\r\n\r\n  // empty the queue\r\n  clear() {\r\n    this.items = [];\r\n  }\r\n}\r\nconst bfs = (START_ROW, START_COL, END_ROW, END_COLUMN, grid,NUMBER_OF_COL,NUMBER_OF_ROW) => {\r\n  // console.log(END_ROW,END_COLUMN)\r\n\r\n  let visitedNodesInOrder = [];\r\n\r\n  //making visited array\r\n  let visited = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n      currentRow.push(false);\r\n    }\r\n    visited.push(currentRow);\r\n  }\r\n\r\n  //creating parent array to keep track of parent so that we can backtrack the steps\r\n  let parent = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW+1; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL+1; col++) {\r\n      currentRow.push(\"N\");\r\n    }\r\n    parent.push(currentRow);\r\n  }\r\n\r\n  //making queue\r\n  let queue = new Queue();\r\n  queue.enqueue([START_ROW, START_COL]);\r\n  visited[START_ROW][START_COL] = true;\r\n  while (queue.isEmpty() == false) {\r\n    const front = queue.dequeue();\r\n    let x = front[0];\r\n    let y = front[1];\r\n    visitedNodesInOrder.push([x, y]);\r\n    if (x == END_ROW && y == END_COLUMN) {\r\n      return { parent, visitedNodesInOrder };\r\n    }\r\n    if (x + 1 < NUMBER_OF_ROW) {\r\n      x += 1;\r\n      \r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          visited[x][y] = true;\r\n          parent[x][y] = \"U\";\r\n          queue.enqueue([x, y]);\r\n        }\r\n      }\r\n      x -= 1;\r\n    }\r\n    if (x > 0) {\r\n      x -= 1;\r\n      \r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          visited[x][y] = true;\r\n          parent[x][y] = \"D\";\r\n          queue.enqueue([x, y]);\r\n        }\r\n      }\r\n      x += 1;\r\n    }\r\n    if (y + 1 < NUMBER_OF_COL) {\r\n      y += 1;\r\n      \r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          visited[x][y] = true;\r\n          parent[x][y] = \"L\";\r\n          queue.enqueue([x, y]);\r\n        }\r\n      }\r\n      y -= 1;\r\n    }\r\n    if (y > 0) {\r\n      y -= 1;\r\n      \r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          visited[x][y] = true;\r\n          parent[x][y] = \"R\";\r\n          queue.enqueue([x, y]);\r\n        }\r\n      }\r\n      y += 1;\r\n    }\r\n  }\r\n  return { parent:-1, visitedNodesInOrder };\r\n  \r\n};\r\nexport default bfs;\r\n","const dfs = (\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COLUMN,\r\n  grid,\r\n  NUMBER_OF_COL,\r\n  NUMBER_OF_ROW\r\n) => {\r\n  // console.log(END_ROW,END_COLUMN)\r\n\r\n  let visitedNodesInOrder = [];\r\n\r\n  //making visited array\r\n  let visited = [];\r\n  for (let row = 0; row <= NUMBER_OF_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col <= NUMBER_OF_COL; col++) {\r\n      currentRow.push(false);\r\n    }\r\n    visited.push(currentRow);\r\n  }\r\n\r\n  //creating parent array to keep track of parent so that we can backtrack the steps\r\n  let parent = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW + 1; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL + 1; col++) {\r\n      currentRow.push(\"N\");\r\n    }\r\n    parent.push(currentRow);\r\n  }\r\n\r\n  //making queue\r\n  //   let queue = new Queue();\r\n  let stack = [];\r\n  //   queue.enqueue([START_ROW, START_COL]);\r\n  stack.push([START_ROW, START_COL]);\r\n  //   visited[START_ROW][START_COL] = true;\r\n  while (stack.length !== 0) {\r\n    const topStack = stack.pop();\r\n    let x = topStack[0];\r\n    let y = topStack[1];\r\n    // console.log(\"vis\",x,y);\r\n    visited[x][y] = true;\r\n    visitedNodesInOrder.push([x, y]);\r\n\r\n    if (x == END_ROW && y == END_COLUMN) {\r\n      return { parent, visitedNodesInOrder };\r\n    }\r\n\r\n    if (y > 0) {\r\n      y -= 1;\r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          //   visited[x][y] = true;\r\n          parent[x][y] = \"R\";\r\n          stack.push([x, y]);\r\n        }\r\n      }\r\n      y += 1;\r\n    }\r\n\r\n    if (x + 1 < NUMBER_OF_ROW) {\r\n      x += 1;\r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          //   visited[x][y] = true;\r\n          parent[x][y] = \"U\";\r\n          stack.push([x, y]);\r\n        }\r\n      }\r\n      x -= 1;\r\n    }\r\n\r\n    if (y + 1 < NUMBER_OF_COL) {\r\n      y += 1;\r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          //   visited[x][y] = true;\r\n          parent[x][y] = \"L\";\r\n          stack.push([x, y]);\r\n        }\r\n      }\r\n      y -= 1;\r\n    }\r\n    if (x > 0) {\r\n      x -= 1;\r\n      if (grid[x][y].isWall == false) {\r\n        if (visited[x][y] == false) {\r\n          //   visited[x][y] = true;\r\n          parent[x][y] = \"D\";\r\n          stack.push([x, y]);\r\n        }\r\n      }\r\n      x += 1;\r\n    }\r\n  }\r\n  return { parent: -1, visitedNodesInOrder };\r\n};\r\nexport default dfs;\r\n","const manhattan = (END_ROW, END_COL, CUR_ROW, CUR_COL) => {\r\n    return Math.abs(END_COL - CUR_COL) + Math.abs(END_ROW - CUR_ROW);\r\n};\r\n\r\n\r\nexport default manhattan;","const chebyshev = (END_ROW, END_COL, CUR_ROW, CUR_COL) => {\r\n    const dy = Math.abs(END_COL-CUR_COL);\r\n    const dx = Math.abs(END_ROW-CUR_ROW);\r\n    const distance = Math.max(dy,dx);\r\n    return distance;    \r\n};\r\n\r\n\r\nexport default chebyshev;","const octile = (END_ROW, END_COL, CUR_ROW, CUR_COL) => {\r\n    const dy = Math.abs(END_COL-CUR_COL);\r\n    const dx = Math.abs(END_ROW-CUR_ROW);\r\n    const distance = 1.141 * (Math.min(dx,dy)) + Math.abs(dx-dy);\r\n    return distance;    \r\n};\r\n\r\n\r\nexport default octile;","const euclidean = (END_ROW, END_COL, CUR_ROW, CUR_COL) => {\r\n    const x = Math.abs(END_ROW-CUR_ROW)*Math.abs(END_ROW-CUR_ROW)\r\n    const y = Math.abs(END_COL-CUR_COL)*Math.abs(END_COL-CUR_COL)\r\n    const d = Math.pow(x+y,0.5);\r\n    return d;\r\n\r\n};\r\n\r\n\r\nexport default euclidean;","//importing heurstic\r\nimport manhattan from \"../Heuristic/manhattan\";\r\nimport chebyshev from \"../Heuristic/chebyshev\";\r\nimport octile from \"../Heuristic/octile\";\r\nimport euclidean from \"../Heuristic/euclidean\";\r\n\r\nconst heuristic = (END_ROW, END_COL, CUR_ROW, CUR_COL, currentHeuristic) => {\r\n  // return Math.abs(END_COL - CUR_COL) + Math.abs(END_ROW - CUR_ROW);\r\n  // console.log(\"currentHeuristic\",currentHeuristic);\r\n  if (currentHeuristic == \"Manhattan\") {\r\n    // console.log(\"in manhattan\");\r\n    const ans =  manhattan(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n    return ans;\r\n    // return Math.abs(END_COL - CUR_COL) + Math.abs(END_ROW - CUR_ROW);\r\n  }\r\n  if (currentHeuristic == \"Chebyshev\") {\r\n    return chebyshev(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n  }\r\n  if (currentHeuristic == \"Octile\") {\r\n    return octile(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n  }\r\n  if (currentHeuristic == \"Euclidean\") {\r\n    return euclidean(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n  }\r\n};\r\n\r\nconst constructPath = (cameFrom, er, ec, sr, sc) => {\r\n  let path = [];\r\n  let x = cameFrom[[er, ec]];\r\n  // console.log(c)\r\n  path.push(x);\r\n  while (x[0] != sr && x[1] != sc) {\r\n    x = cameFrom[x];\r\n    path.push(x);\r\n  }\r\n  return path;\r\n};\r\n\r\nclass QueueElement {\r\n  constructor(element, priority) {\r\n    this.element = element;\r\n    this.priority = priority;\r\n  }\r\n}\r\n\r\nclass PriorityQueue {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n\r\n  enqueue(element, priority) {\r\n    let queueElement = new QueueElement(element, priority);\r\n    let added = false;\r\n    for (let i = 0; i < this.items.length; i++) {\r\n      if (queueElement.priority < this.items[i].priority) {\r\n        this.items.splice(i, 0, queueElement);\r\n        added = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!added) {\r\n      this.items.push(queueElement);\r\n    }\r\n  }\r\n  dequeue() {\r\n    \r\n    return this.items.shift();\r\n  }\r\n\r\n  isEmpty() {\r\n    if (this.items.length === 0) return true;\r\n    return false;\r\n  }\r\n\r\n  printPQueue() {\r\n    var str = \"\";\r\n    for (var i = 0; i < this.items.length; i++)\r\n      str += this.items[i].element + \" \";\r\n    return str;\r\n  }\r\n\r\n  //   checkIfPresent(element){\r\n\r\n  //   }\r\n}\r\n\r\nconst astar = (\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COLUMN,\r\n  grid,\r\n  NUMBER_OF_COL,\r\n  NUMBER_OF_ROW,\r\n  currentHeuristic\r\n) => {\r\n  let queue = new PriorityQueue();\r\n  let cameFrom = {};\r\n  let vis = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n      currentRow.push(false);\r\n    }\r\n    vis.push(currentRow);\r\n  }\r\n\r\n  let parent = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW + 1; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL + 1; col++) {\r\n      currentRow.push(\"N\");\r\n    }\r\n    parent.push(currentRow);\r\n  }\r\n\r\n  let gScore = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n      currentRow.push(100000000);\r\n    }\r\n    gScore.push(currentRow);\r\n  }\r\n  gScore[START_ROW][START_COL] = 0;\r\n\r\n  let fScore = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n      currentRow.push(100000000);\r\n    }\r\n    fScore.push(currentRow);\r\n  }\r\n  //   console.log(\"fScore\", fScore);\r\n  fScore[START_ROW][START_COL] = heuristic(\r\n    END_ROW,\r\n    END_COLUMN,\r\n    START_ROW,\r\n    START_COL,\r\n    currentHeuristic\r\n  );\r\n  //   let vis = {};\r\n  //   console.log(\"fScore\",fScore);\r\n  let visitedNodes = [];\r\n  queue.enqueue([START_ROW, START_COL], fScore[START_ROW][START_COL]);\r\n  vis[START_ROW][START_COL] = true;\r\n  const goal = [END_ROW, END_COLUMN];\r\n  //   console.log(\"f\");\r\n  while (queue.isEmpty() === false) {\r\n    // console.log(\"conetnets\",queue.printPQueue());\r\n    let minFScoreNode = queue.dequeue().element;\r\n    // console.log(minFScoreNode);\r\n    // console.log(\"compare\",minFScoreNode,goal)\r\n    if (goal[0] === minFScoreNode[0] && goal[1] === minFScoreNode[1]) {\r\n      //   console.log(\"compeed the astar\");\r\n      console.log(cameFrom);\r\n      //   return constructPath(cameFrom, END_ROW, END_COLUMN, START_ROW, START_COL);\r\n      return { parent, visitedNodes };\r\n    }\r\n    const x = minFScoreNode[0];\r\n    const y = minFScoreNode[1];\r\n    visitedNodes.push([x, y]);\r\n    let newx = x + 1;\r\n    let newy = y;\r\n    if (newx < NUMBER_OF_ROW) {\r\n      if (grid[newx][newy].isWall == false) {\r\n        const tent_score = gScore[x][y] + 1;\r\n        //   console.log(\"tent_score\", tent_score);\r\n        if (tent_score < gScore[newx][newy]) {\r\n          cameFrom[[newx, newy]] = [x, y];\r\n          gScore[newx][newy] = tent_score;\r\n          fScore[newx][newy] =\r\n            gScore[newx][newy] + heuristic(END_ROW, END_COLUMN, newx, newy,currentHeuristic);\r\n          if (vis[newx][newy] === false) {\r\n            vis[newx][newy] = true;\r\n            parent[newx][newy] = \"U\";\r\n            queue.enqueue([newx, newy], fScore[newx][newy]);\r\n            // console.log(\"f\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // console.log(newx, NUMBER_OF_ROW);\r\n\r\n    newx = x - 1;\r\n    newy = y;\r\n    if (newx >= 0) {\r\n      if (grid[newx][newy].isWall == false) {\r\n        const tent_score = gScore[x][y] + 1;\r\n        if (tent_score < gScore[newx][newy]) {\r\n          cameFrom[[newx, newy]] = [x, y];\r\n          gScore[newx][newy] = tent_score;\r\n          fScore[newx][newy] =\r\n            gScore[newx][newy] + heuristic(END_ROW, END_COLUMN, newx, newy);\r\n          if (vis[newx][newy] === false) {\r\n            vis[newx][newy] = true;\r\n            parent[newx][newy] = \"D\";\r\n            queue.enqueue([newx, newy], fScore[newx][newy]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    newx = x;\r\n    newy = y - 1;\r\n    if (newy >= 0) {\r\n      if (grid[newx][newy].isWall == false) {\r\n        const tent_score = gScore[x][y] + 1;\r\n        if (tent_score < gScore[newx][newy]) {\r\n          cameFrom[[newx, newy]] = [x, y];\r\n          gScore[newx][newy] = tent_score;\r\n          fScore[newx][newy] =\r\n            gScore[newx][newy] + heuristic(END_ROW, END_COLUMN, newx, newy);\r\n          if (vis[newx][newy] === false) {\r\n            vis[newx][newy] = true;\r\n            parent[newx][newy] = \"R\";\r\n            queue.enqueue([newx, newy], fScore[newx][newy]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    newx = x;\r\n    newy = y + 1;\r\n    if (newy < NUMBER_OF_COL) {\r\n      if (grid[newx][newy].isWall == false) {\r\n        const tent_score = gScore[x][y] + 1;\r\n        if (tent_score < gScore[newx][newy]) {\r\n          cameFrom[[newx, newy]] = [x, y];\r\n          gScore[newx][newy] = tent_score;\r\n          fScore[newx][newy] =\r\n            gScore[newx][newy] + heuristic(END_ROW, END_COLUMN, newx, newy,currentHeuristic);\r\n          if (vis[newx][newy] === false) {\r\n            vis[newx][newy] = true;\r\n            parent[newx][newy] = \"L\";\r\n            queue.enqueue([newx, newy], fScore[newx][newy]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // for (let row = 0; row < NUMBER_OF_ROW ; row++) {\r\n    //   for (let col = 0; col < NUMBER_OF_COL ; col++) {\r\n    //     if (fScore[row][col]<currentminFScoreValue){\r\n    //         currentminFScoreValue=  fScore[row][col];\r\n    //         minFScoreNode = [row,col];\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n  return { parent: -1, visitedNodes };\r\n};\r\n\r\n// const astar = (\r\n//   START_ROW,\r\n//   START_COL,\r\n//   END_ROW,\r\n//   END_COLUMN,\r\n//   grid,\r\n//   NUMBER_OF_COL,\r\n//   NUMBER_OF_ROW\r\n// ) => {};\r\n\r\nexport default astar;\r\n","// START_ROW,\r\n//   START_COL,\r\n//   END_ROW,\r\n//   END_COLUMN,\r\n//   grid,\r\n//   NUMBER_OF_COL,\r\n//   NUMBER_OF_ROW,\r\n//   currentHeuristic\r\nimport manhattan from \"../Heuristic/manhattan\";\r\nimport chebyshev from \"../Heuristic/chebyshev\";\r\nimport octile from \"../Heuristic/octile\";\r\nimport euclidean from \"../Heuristic/euclidean\";\r\n\r\nconst heuristic = (END_ROW, END_COL, CUR_ROW, CUR_COL, currentHeuristic) => {\r\n  // return Math.abs(END_COL - CUR_COL) + Math.abs(END_ROW - CUR_ROW);\r\n  // console.log(\"currentHeuristic\",currentHeuristic);\r\n  if (currentHeuristic == \"Manhattan\") {\r\n    // console.log(\"in manhattan\");\r\n    const ans = manhattan(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n    return ans;\r\n    // return Math.abs(END_COL - CUR_COL) + Math.abs(END_ROW - CUR_ROW);\r\n  }\r\n  if (currentHeuristic == \"Chebyshev\") {\r\n    return chebyshev(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n  }\r\n  if (currentHeuristic == \"Octile\") {\r\n    return octile(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n  }\r\n  if (currentHeuristic == \"Euclidean\") {\r\n    return euclidean(END_ROW, END_COL, CUR_ROW, CUR_COL);\r\n  }\r\n};\r\n\r\nclass Node {\r\n  constructor(parent, position) {\r\n    this.parent = parent;\r\n    this.position = position;\r\n    this.g = 0;\r\n    this.h = 0;\r\n    this.f = 0;\r\n  }\r\n  isEqual(other) {\r\n    if (\r\n      this.position[0] === other.position[0] &&\r\n      this.position[1] === other.position[1]\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nconst return_path = (current_node, grid, NUMBER_OF_ROW, NUMBER_OF_COL) => {\r\n  let path = [];\r\n  let result = [];\r\n  // for (let index = 0; index < NUMBER_OF_ROW; index++) {\r\n  //     let roww = [];\r\n  //     for (let j = 0; j < NUMBER_OF_COL; j++) {\r\n  //         roww.push(-1);\r\n  //     }\r\n  //     result.push(roww);\r\n  // }\r\n  let current = current_node;\r\n\r\n  while (current !== undefined) {\r\n    path.push(current.position);\r\n    // console.log(current);\r\n    current = current.parent;\r\n  }\r\n//   console.log(path);\r\n  return path;\r\n};\r\n\r\nexport function astar2(\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COLUMN,\r\n  grid,\r\n  NUMBER_OF_COL,\r\n  NUMBER_OF_ROW,\r\n  currentHeuristic\r\n) {\r\n  let start_node = new Node(undefined, [START_ROW, START_COL]);\r\n  start_node.g = 0;\r\n  start_node.f = 0;\r\n  start_node.h = 0;\r\n\r\n  let end_node = new Node(undefined, [END_ROW, END_COLUMN]);\r\n  end_node.g = 0;\r\n  end_node.f = 0;\r\n  end_node.h = 0;\r\n\r\n  let yet_to_visit_list = [];\r\n  let visited_list = [];\r\n\r\n  let visitedNodesInOrder = [];\r\n\r\n  yet_to_visit_list.push(start_node);\r\n\r\n  let outer_iterations = 0;\r\n  let max_iterations = 10;\r\n  let move = [\r\n    [-1, 0],\r\n    [0, -1],\r\n    [1, 0],\r\n    [0, 1],\r\n  ];\r\n  while (yet_to_visit_list.length !== 0) {\r\n    outer_iterations += 1;\r\n    let current_node = yet_to_visit_list[0];\r\n    let current_index = 0;\r\n    for (let i = 0; i < yet_to_visit_list.length; i++) {\r\n      let index = i;\r\n      let item = yet_to_visit_list[i];\r\n      if (item.f < current_node.f) {\r\n        current_node = item;\r\n        current_index = index;\r\n      }\r\n    }\r\n    if (outer_iterations > max_iterations * 10000) {\r\n      alert(\"too many iterations\");\r\n      return {path:-1,visitedNodesInOrder};\r\n    }\r\n    // yet_to_visit_list.filter((thing) => thing!==current_node);\r\n\r\n    let newyettovisitlist = [];\r\n    for (let indexxx = 0; indexxx < yet_to_visit_list.length; indexxx++) {\r\n      if (indexxx !== current_index) {\r\n        newyettovisitlist.push(yet_to_visit_list[indexxx]);\r\n      }\r\n    }\r\n    yet_to_visit_list = [];\r\n    for (let indexxx = 0; indexxx < newyettovisitlist.length; indexxx++) {\r\n      yet_to_visit_list.push(newyettovisitlist[indexxx]);\r\n    }\r\n    visited_list.push(current_node);\r\n    // console.log(end_node);\r\n    // if ((current_node.position[0] === end_node.position[0]) && (current_node.position[1] === end_node.position[1])) {\r\n    if (end_node.isEqual(current_node)) {\r\n      // console.log(\"current_node\",current_node.row,current_node.col);\r\n      // console.log(\"end_node\",end_node.row,end_node.col);\r\n      return {path:return_path(current_node, grid, NUMBER_OF_ROW, NUMBER_OF_COL),visitedNodesInOrder};\r\n    }\r\n\r\n    let childrens = [];\r\n\r\n    for (let indexx = 0; indexx < move.length; indexx++) {\r\n      const new_position = move[indexx];\r\n      let nodeposition = [\r\n        current_node.position[0] + new_position[0],\r\n        current_node.position[1] + new_position[1],\r\n      ];\r\n      if (\r\n        nodeposition[0] >= NUMBER_OF_ROW ||\r\n        nodeposition[0] < 0 ||\r\n        nodeposition[1] >= NUMBER_OF_COL ||\r\n        nodeposition[1] < 0\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      if (grid[nodeposition[0]][nodeposition[1]].isWall === true) continue;\r\n      let new_node = new Node(current_node, nodeposition);\r\n      childrens.push(new_node);\r\n    }\r\n\r\n    for (let indexx = 0; indexx < childrens.length; indexx++) {\r\n      const child = childrens[indexx];\r\n\r\n      if (visited_list.includes(child)) continue;\r\n      child.g = current_node.g + 1;\r\n\r\n        child.g = Math.pow(END_COLUMN-child.position[1],2)+Math.pow(END_ROW-child.position[0],2);\r\n\r\n    //   child.h = heuristic(\r\n    //     END_ROW,\r\n    //     END_COLUMN,\r\n    //     child.row,\r\n    //     child.col,\r\n    //     currentHeuristic\r\n    //   );\r\n      child.f = child.g + child.h;\r\n      let flag = 0;\r\n      for (let j = 0; j < yet_to_visit_list.length; j++) {\r\n        const element = yet_to_visit_list[j];\r\n        if ((child.isEqual(element)) && (child.g >= element.g)) {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag === 1) continue;\r\n    //   console.log(child.position,child.f,child.g,child.h);\r\n        visitedNodesInOrder.push(child.position);\r\n      yet_to_visit_list.push(child);\r\n    }\r\n  }\r\n}\r\nexport default astar2;\r\n","function randomMaze(\r\n  grid,\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COL,\r\n  NUMBER_OF_ROW,\r\n  NUMBER_OF_COL\r\n) {\r\n  //   if (!startNode || !finishNode || startNode === finishNode) {\r\n  //     return false;\r\n  //   }\r\n\r\n  let newGrid = grid.slice();\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    if (row == START_ROW && (0 == START_COL || START_COL == NUMBER_OF_COL - 1))\r\n      continue;\r\n    if (row == END_ROW && (0 == END_COL || END_COL == NUMBER_OF_COL - 1))\r\n      continue;\r\n    newGrid[row][0].isWall = true;\r\n    newGrid[row][NUMBER_OF_COL - 1].isWall = true;\r\n  }\r\n  for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n    if (col == START_COL && (0 == START_ROW || START_ROW == NUMBER_OF_ROW - 1))\r\n      continue;\r\n    if (col == END_COL && (0 == END_ROW || END_ROW == NUMBER_OF_ROW - 1))\r\n      continue;\r\n    newGrid[0][col].isWall = true;\r\n    newGrid[NUMBER_OF_ROW - 1][col].isWall = true;\r\n  }\r\n  let walls = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n      if (\r\n        (row === START_ROW && col === START_COL) ||\r\n        (row === END_ROW && col === END_COL)\r\n      )\r\n        continue;\r\n      if (Math.random() < 0.33) {\r\n        walls.push([row, col]);\r\n        newGrid[row][col].isWall = true;\r\n      }\r\n    }\r\n  }\r\n  walls.sort(() => Math.random() - 0.5);\r\n  return { walls, newGrid };\r\n}\r\nexport default randomMaze;\r\n","function randomNumber(min, max) { \r\n    return Math.floor(Math.random() * (max - min) + min);\r\n} \r\n\r\nconst verticalMaze = (grid,START_ROW,START_COL , END_ROW, END_COL,NUMBER_OF_ROW,NUMBER_OF_COL) => {\r\n    let newGrid = grid.slice();\r\n    for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n        if (row==START_ROW && (0==START_COL || START_COL==NUMBER_OF_COL-1)) continue;\r\n        if (row==END_ROW && (0==END_COL || END_COL==NUMBER_OF_COL-1)) continue;\r\n        newGrid[row][0].isWall = true;\r\n        newGrid[row][NUMBER_OF_COL-1].isWall = true;\r\n    }\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n        if (col==START_COL && (0==START_ROW || START_ROW==NUMBER_OF_ROW-1)) continue;\r\n        if (col==END_COL && (0==END_ROW || END_ROW ==NUMBER_OF_ROW-1)) continue;\r\n        newGrid[0][col].isWall=true;\r\n        newGrid[NUMBER_OF_ROW-1][col].isWall=true;\r\n    }\r\n    for (let row=0;row<NUMBER_OF_ROW;row++){\r\n        \r\n        if (row%2===1) continue;\r\n        let random = randomNumber(0,NUMBER_OF_COL);\r\n        if (row===START_ROW || row===END_ROW){\r\n            if (START_ROW===END_ROW){\r\n                for (let col=0;col<NUMBER_OF_COL;col++){\r\n                    if (col!==START_COL && col!==END_COL){\r\n                        // console.log(newGrid);\r\n                        newGrid[row][col].isWall = true;\r\n                        // console.log(newGrid[row][col].isWall )\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            while(random!==START_COL && random!==END_COL){\r\n                random = randomNumber(0,NUMBER_OF_COL);\r\n            }\r\n            // if (row===END_ROW){\r\n            //     if (random===END_COL){\r\n            //         random = randomNumber(0,NUMBER_OF_COL);\r\n            //     }\r\n            // }\r\n            // if (row===START_ROW){\r\n            //     if (random===START_COL){\r\n            //         random = randomNumber(0,NUMBER_OF_COL);\r\n            //     }\r\n            // }\r\n        }\r\n        \r\n        for (let col=0;col<NUMBER_OF_COL;col++){\r\n            if (col!==random){\r\n                // console.log(newGrid);\r\n                newGrid[row][col].isWall = true;\r\n                // console.log(newGrid[row][col].isWall )\r\n            }\r\n        }\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nexport default verticalMaze;","// recursiveDivision\r\n\r\nlet walls;\r\nfunction recursiveDivision(\r\n  grid,\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COL,\r\n  NUMBER_OF_ROW,\r\n  NUMBER_OF_COL\r\n) {\r\n  let vertical = [];\r\n  let horizontal = [];\r\n\r\n  for (let row = 1; row < grid.length; row++) horizontal.push(row);\r\n  for (let col = 1; col < grid[0].length; col++) vertical.push(col);\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    if (row == START_ROW && (0 == START_COL || START_COL == NUMBER_OF_COL - 1))\r\n      continue;\r\n    if (row == END_ROW && (0 == END_COL || END_COL == NUMBER_OF_COL - 1))\r\n      continue;\r\n    grid[row][0].isWall = true;\r\n    grid[row][NUMBER_OF_COL - 1].isWall = true;\r\n  }\r\n  for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n    if (col == START_COL && (0 == START_ROW || START_ROW == NUMBER_OF_ROW - 1))\r\n      continue;\r\n    if (col == END_COL && (0 == END_ROW || END_ROW == NUMBER_OF_ROW - 1))\r\n      continue;\r\n    grid[0][col].isWall = true;\r\n    grid[NUMBER_OF_ROW - 1][col].isWall = true;\r\n  }\r\n  NUMBER_OF_COL -= 1;\r\n  NUMBER_OF_ROW -= 1;\r\n  walls = [];\r\n  rec(vertical, horizontal, grid, START_ROW, START_COL, END_ROW, END_COL);\r\n  console.log(\"grid\", grid);\r\n  return grid;\r\n}\r\n\r\nconst rec = (\r\n  vertical,\r\n  horizontal,\r\n  grid,\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COL\r\n) => {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let direction = 0;\r\n  let number = 0;\r\n  if (vertical.length > horizontal.length) {\r\n    direction = 0;\r\n    number = generateOddRandomNumber(vertical);\r\n  } else {\r\n    direction = 1;\r\n    number = generateOddRandomNumber(horizontal);\r\n  }\r\n  if (direction === 0) {\r\n    addWall(\r\n      direction,\r\n      number,\r\n      grid,\r\n      vertical,\r\n      horizontal,\r\n      START_ROW,\r\n      START_COL,\r\n      END_ROW,\r\n      END_COL\r\n    );\r\n    rec(\r\n      vertical.slice(0, vertical.indexOf(number)),\r\n      horizontal,\r\n      grid,\r\n      START_ROW,\r\n      START_COL,\r\n      END_ROW,\r\n      END_COL\r\n    );\r\n    rec(\r\n      vertical.slice(vertical.indexOf(number) + 1),\r\n      horizontal,\r\n      grid,\r\n      START_ROW,\r\n      START_COL,\r\n      END_ROW,\r\n      END_COL\r\n    );\r\n  } else {\r\n    addWall(\r\n      direction,\r\n      number,\r\n      grid,\r\n      vertical,\r\n      horizontal,\r\n      START_ROW,\r\n      START_COL,\r\n      END_ROW,\r\n      END_COL\r\n    );\r\n    rec(\r\n      vertical,\r\n      horizontal.slice(0, horizontal.indexOf(number)),\r\n      grid,\r\n      START_ROW,\r\n      START_COL,\r\n      END_ROW,\r\n      END_COL\r\n    );\r\n    rec(\r\n      vertical,\r\n      horizontal.slice(horizontal.indexOf(number) + 1),\r\n      grid,\r\n      START_ROW,\r\n      START_COL,\r\n      END_ROW,\r\n      END_COL\r\n    );\r\n  }\r\n};\r\n\r\nfunction addWall(\r\n  dir,\r\n  num,\r\n  grid,\r\n  vertical,\r\n  horizontal,\r\n  START_ROW,\r\n  START_COL,\r\n  END_ROW,\r\n  END_COL\r\n) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (dir === 0) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === START_ROW && num === START_COL) ||\r\n        (temp === END_ROW && num === END_COL)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if (\r\n        (temp === START_ROW && num === START_COL) ||\r\n        (temp === END_ROW && num === END_COL)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n    if (wall == undefined) continue;\r\n    // console.log(\"wall\",wall);\r\n    // console.log(\"wall[0]\",wall[0]);\r\n\r\n    grid[wall[0]][wall[1]].isWall = true;\r\n  }\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 !== 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return randomNum;\r\n}\r\nfunction generateOddRandomNumber(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\nexport default recursiveDivision;\r\n","import React, { Component } from \"react\";\r\n\r\nimport nodesInShortestPath from \"../helper functions/nodesInShortestPath\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Navbar, Nav, NavDropdown, Button } from \"react-bootstrap\";\r\n\r\nimport Popup from \"reactjs-popup\";\r\nimport \"reactjs-popup/dist/index.css\";\r\n\r\nimport Node from \"./Node/Node\";\r\n\r\nimport \"./PathFinding.css\";\r\n\r\nimport bfs from \"../algorithms/bfs\";\r\nimport dfs from \"../algorithms/dfs\";\r\nimport astar from \"../algorithms/astar\";\r\nimport astar2 from \"../algorithms/astar2\";\r\n\r\nimport randomMaze from \"../Maze/randomMazeGen\";\r\nimport verticalMaze from \"../Maze/verticalMaze\";\r\nimport recursiveDivision from \"../Maze/recursiveDivision\"\r\n\r\n//constants\r\nlet START_ROW = 10;\r\nlet START_COL = 10;\r\nlet END_ROW = 10;\r\nlet END_COLUMN = 31;\r\n\r\nconst NUMBER_OF_ROW = 25;\r\nconst NUMBER_OF_COL = 60;\r\n\r\nexport default class PathFinding extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      currentAlgo: \"BFS\",\r\n      mousePressedTarget: false,\r\n      mousePressedSource: false,\r\n      currentHeuristic: \"Manhattan\",\r\n      msgDisplay: \"none\",\r\n      msgOpacity: 0,\r\n      timeTaken: 0,\r\n      currentMaze: \"recDiv\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid(false, [],false);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  //mouse events\r\n  handleMouseDown(row, col) {\r\n    this.clearPath();\r\n    if (row === END_ROW && col === END_COLUMN) {\r\n      this.setState({ mousePressedTarget: true });\r\n      return;\r\n    }\r\n    if (row === START_ROW && col === START_COL) {\r\n      this.setState({ mousePressedSource: true });\r\n      return;\r\n    }\r\n\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    if (col === END_COLUMN && row === END_ROW) {\r\n      this.setState({ grid: this.state.grid, mouseIsPressed: true });\r\n    } else {\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n  handleMouseEnter(row, col) {\r\n    // console.log(\"mouse enter\");\r\n    if (this.state.mousePressedTarget === true) {\r\n      if (row === START_ROW && col === START_COL) {\r\n        return;\r\n      }\r\n      const newGrid = getNewGridWithTargetChanged(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n      END_COLUMN = col;\r\n      END_ROW = row;\r\n      return;\r\n    }\r\n    // mousePressedSource\r\n    if (this.state.mousePressedSource === true) {\r\n      if (row === END_ROW && col === END_COLUMN) {\r\n        return;\r\n      }\r\n      const newGrid = getNewGridWithSourceChanged(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n      START_COL = col;\r\n      START_ROW = row;\r\n      return;\r\n    }\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (col === END_COLUMN && row === END_ROW) {\r\n      return;\r\n    }\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  handleMouseUp() {\r\n    // console.log(\"mouse up\");\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n      mousePressedTarget: false,\r\n      mousePressedSource: false,\r\n    });\r\n  }\r\n  displayMsg = () => {\r\n    // console.log()\r\n    this.setState({msgDisplay:\"block\", msgOpacity:1});\r\n    setTimeout(() => {\r\n      this.setState({msgDisplay:\"none\", msgOpacity:0});\r\n    },5000)\r\n  }\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder, algo) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        if (nodesInShortestPathOrder === -1) {\r\n          return;\r\n        }\r\n        this.displayMsg();\r\n        if (algo === \"DFS\") {\r\n          \r\n          setTimeout(() => {\r\n            this.animateShortestPath(visitedNodesInOrder);\r\n          }, 5 * i);\r\n        } else {\r\n          setTimeout(() => {\r\n            this.animateShortestPath(nodesInShortestPathOrder);\r\n          }, 5 * i);\r\n        }\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      //ss\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const end_row = node[0];\r\n        const end_col = node[1];\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].inPathFirst = true;\r\n        this.setState({ newGrid });\r\n      }, 10*i);\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const end_row = node[0];\r\n        const end_col = node[1];\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].inPathFirst = false;\r\n        newGrid[end_row][end_col].inPath = true;\r\n\r\n        this.setState({ newGrid });\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  //this function makes the inshortestpath properity of the row and column true and uses setTimeout\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        const end_row = node[0];\r\n        const end_col = node[1];\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].inPathFirst = false;\r\n        newGrid[end_row][end_col].inPath = false;\r\n        newGrid[end_row][end_col].inShortestPath = true;\r\n        this.setState({ newGrid });\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  //function for resetting the grid\r\n  resetGrid = () => {\r\n    const grid = getInitialGrid(false, [],false);\r\n    this.setState({ grid });\r\n  };\r\n\r\n  drawArrows = (parent) => {\r\n    \r\n    let end_row = END_ROW;\r\n    let end_col = END_COLUMN;\r\n    while (end_row !== START_ROW || end_col !== START_COL) {\r\n      // let newGrid = this.state.grid;\r\n      // newGrid[end_row][end_col].direction = parent[end_row][end_col];\r\n      // this.setState({ newGrid });\r\n\r\n      if (parent[end_row][end_col] == \"U\") {\r\n        end_row -= 1;\r\n        if (end_col === START_COL && end_row === START_ROW) {\r\n          break;\r\n        }\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].direction = \"U\";\r\n        this.setState({ newGrid });\r\n      } else if (parent[end_row][end_col] == \"D\") {\r\n        end_row += 1;\r\n        if (end_col === START_COL && end_row === START_ROW) {\r\n          break;\r\n        }\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].direction = \"D\";\r\n        this.setState({ newGrid });\r\n      } else if (parent[end_row][end_col] == \"L\") {\r\n        end_col -= 1;\r\n        if (end_col === START_COL && end_row === START_ROW) {\r\n          break;\r\n        }\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].direction = \"L\";\r\n        this.setState({ newGrid });\r\n      } else {\r\n        end_col += 1;\r\n        if (end_col === START_COL && end_row === START_ROW) {\r\n          break;\r\n        }\r\n        let newGrid = this.state.grid;\r\n        newGrid[end_row][end_col].direction = \"R\";\r\n        this.setState({ newGrid });\r\n      }\r\n    }\r\n  };\r\n\r\n  parent = -1;\r\n  visualizeAlgo = () => {\r\n    this.clearPath();\r\n    let tempGrid = this.state.grid;\r\n    tempGrid[START_ROW][START_COL].isWall=false;\r\n    tempGrid[END_ROW][END_COLUMN].isWall=false;\r\n    const prevTime = performance.now();\r\n\r\n    if (this.state.currentAlgo===\"ASTAR2\"){\r\n      const currentHeuristic = this.state.currentHeuristic;\r\n      // console.log(END_ROW,END_COLUMN)\r\n      const {path,visitedNodesInOrder} = astar2(START_ROW,\r\n        START_COL,\r\n        END_ROW,\r\n        END_COLUMN,\r\n        this.state.grid,\r\n        NUMBER_OF_COL,\r\n        NUMBER_OF_ROW,\r\n        currentHeuristic);\r\n        // this.drawArrows(parent);\r\n        console.log(path);\r\n        console.log(visitedNodesInOrder);\r\n        this.animateAlgo(visitedNodesInOrder, path, \"BFS\");\r\n        // this.animateAlgo(path, path, \"BFS\");\r\n    }\r\n\r\n    if (this.state.currentAlgo === \"ASTAR\") {\r\n      // console.log(\"this.state.currentHeuristic\", this.state.currentHeuristic);\r\n      alert(\"ASTAR is wrong\")\r\n      const currentHeuristic = this.state.currentHeuristic;\r\n      const { parent, visitedNodes } = astar(\r\n        START_ROW,\r\n        START_COL,\r\n        END_ROW,\r\n        END_COLUMN,\r\n        this.state.grid,\r\n        NUMBER_OF_COL,\r\n        NUMBER_OF_ROW,\r\n        currentHeuristic\r\n      );\r\n      const finalTime = performance.now();\r\n      this.setState({timeTaken:(finalTime-prevTime)});\r\n      // console.log(parent);\r\n      let nodesInShortestPathOrder = [];\r\n      // console.log(parent);\r\n      if (parent !== -1 && parent != undefined) {\r\n        nodesInShortestPathOrder = nodesInShortestPath(\r\n          parent,\r\n          START_ROW,\r\n          START_COL,\r\n          END_ROW,\r\n          END_COLUMN\r\n        );\r\n        this.drawArrows(parent);\r\n      }\r\n      this.animateAlgo(visitedNodes, nodesInShortestPathOrder, \"BFS\");\r\n    }\r\n    if (this.state.currentAlgo == \"BFS\") {\r\n      \r\n      \r\n      let { parent, visitedNodesInOrder } = bfs(\r\n        START_ROW,\r\n        START_COL,\r\n        END_ROW,\r\n        END_COLUMN,\r\n        this.state.grid,\r\n        NUMBER_OF_COL,\r\n        NUMBER_OF_ROW\r\n      );\r\n      \r\n      const finalTime = performance.now();\r\n      this.setState({timeTaken:(finalTime-prevTime)});\r\n      let nodesInShortestPathOrder = -1;\r\n      if (parent !== -1) {\r\n        nodesInShortestPathOrder = nodesInShortestPath(\r\n          parent,\r\n          START_ROW,\r\n          START_COL,\r\n          END_ROW,\r\n          END_COLUMN\r\n        );\r\n        this.drawArrows(parent);\r\n      }\r\n      this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder, \"BFS\");\r\n    } else if (this.state.currentAlgo === \"DFS\") {\r\n      console.log(\"in dfs\");\r\n      let { parent, visitedNodesInOrder } = dfs(\r\n        START_ROW,\r\n        START_COL,\r\n        END_ROW,\r\n        END_COLUMN,\r\n        this.state.grid,\r\n        NUMBER_OF_COL,\r\n        NUMBER_OF_ROW\r\n      );\r\n      const finalTime = performance.now();\r\n      this.setState({timeTaken:(finalTime-prevTime)});\r\n      // console.log(\"visitedNodesInOrder\",visitedNodesInOrder);\r\n      let nodesInShortestPathOrder = -1;\r\n      if (parent !== -1) {\r\n        nodesInShortestPathOrder = nodesInShortestPath(\r\n          parent,\r\n          START_ROW,\r\n          START_COL,\r\n          END_ROW,\r\n          END_COLUMN\r\n        );\r\n        this.drawArrows(parent);\r\n      }\r\n      this.animateAlgo(visitedNodesInOrder, visitedNodesInOrder, \"DFS\");\r\n    }\r\n  };\r\n\r\n  clearPath = () => {\r\n    this.setState({ grid: getInitialGrid(true, this.state.grid,false) });\r\n  };\r\n\r\n  generateMaze = (currentMaze) => {\r\n    let tempGrid = this.state.grid;\r\n    tempGrid[START_ROW][START_COL].isStart = false;\r\n    START_ROW = 1;\r\n    START_COL = 1;\r\n    tempGrid[START_ROW][START_COL].isStart = true;\r\n    tempGrid[END_ROW][END_COLUMN].isFinish=false;\r\n    END_COLUMN = NUMBER_OF_COL-2;\r\n    END_ROW = NUMBER_OF_ROW-2;\r\n    tempGrid[END_ROW][END_COLUMN].isFinish=true;\r\n    this.setState({grid:tempGrid});\r\n    this.setState({ grid: getInitialGrid(true, this.state.grid,true) });\r\n\r\n\r\n    if (currentMaze===\"recDiv\"){\r\n      const newGrid = recursiveDivision(this.state.grid,START_ROW,START_COL , END_ROW, END_COLUMN,NUMBER_OF_ROW,NUMBER_OF_COL);\r\n      this.setState({grid:newGrid});\r\n    }\r\n    if (currentMaze===\"randomMaze\"){\r\n      let {walls,newGrid} = randomMaze(this.state.grid,START_ROW,START_COL , END_ROW, END_COLUMN,NUMBER_OF_ROW,NUMBER_OF_COL);\r\n      this.setState({grid:newGrid});\r\n    }\r\n    if (currentMaze===\"verticalMaze\"){\r\n      const newGrid = verticalMaze(this.state.grid,START_ROW,START_COL , END_ROW, END_COLUMN,NUMBER_OF_ROW,NUMBER_OF_COL);\r\n      this.setState({grid:newGrid});\r\n    }\r\n    if (currentMaze===\"horzMaze\"){\r\n      const newGrid = verticalMaze(this.state.grid,START_ROW,START_COL , END_ROW, END_COLUMN,NUMBER_OF_ROW,NUMBER_OF_COL);\r\n      this.setState({grid:newGrid});\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //for random Maze\r\n    // this.setState({ grid: getInitialGrid(true, this.state.grid,true) });\r\n    // let {walls,newGrid} = randomMaze(this.state.grid,START_ROW,START_COL , END_ROW, END_COLUMN,NUMBER_OF_ROW,NUMBER_OF_COL);\r\n    // console.log(\"returned grid\",newGrid)\r\n    // this.setState({grid:newGrid});\r\n    // console.log(this.state.grid);\r\n  };\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <div className=\"containerr\">\r\n        <div className=\"headerr\" style={{ marginBottom: 10 }}>\r\n          <div className=\"navbarr\">\r\n            <Navbar style={{fontSize:17}} collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n              <Navbar.Brand\r\n                style={{fontSize:30}}\r\n                href=\"#home\"\r\n                // style={{ marginLeft: 4, fontSize: 35 }}\r\n              >\r\n                The PathFinder\r\n              </Navbar.Brand>\r\n              <Nav.Link\r\n                // style={{ marginRight: 10, fontSize: 25 }}\r\n                onClick={() => this.resetGrid()}\r\n              >\r\n                Reset Grid\r\n              </Nav.Link>\r\n              <Nav.Link\r\n                // style={{ marginRight: 10, fontSize: 25 }}\r\n                onClick={() => this.clearPath()}\r\n              >\r\n                Clear Path\r\n              </Nav.Link>\r\n\r\n              \r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  \r\n                  \r\n\r\n                  <NavDropdown\r\n                  \r\n                    title=\"Generate Maze\"\r\n                    id=\"collasible-nav-dropdown\"\r\n                    // style={{ marginRight: 10, fontSize: 25, color: \"#0d6efd\" }}\r\n                  >\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.generateMaze(\"recDiv\")}\r\n                    >\r\n                      Recursive Division Maze\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.generateMaze(\"randomMaze\")}\r\n                    >\r\n                      Random Maze\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.generateMaze(\"verticalMaze\")}\r\n                    >\r\n                      Vertical Division Maze\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.generateMaze(\"horzMaze\")}\r\n                    >\r\n                      Horizontal Division Maze\r\n                    </NavDropdown.Item>\r\n                    \r\n                  </NavDropdown>\r\n\r\n\r\n                  <NavDropdown\r\n                    title=\"Algorithms\"\r\n                    id=\"collasible-nav-dropdown\"\r\n                    // style={{ marginRight: 10, fontSize: 25, color: \"#0d6efd\" }}\r\n                  >\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.setState({ currentAlgo: \"BFS\" })}\r\n                    >\r\n                      Breath first search\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.setState({ currentAlgo: \"DFS\" })}\r\n                    >\r\n                      Depth first search\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.setState({ currentAlgo: \"ASTAR2\" })}\r\n                    >\r\n                      A*\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() => this.setState({ currentAlgo: \"DIJKSTRA\" })}\r\n                    >\r\n                      Dijkstra\r\n                    </NavDropdown.Item>\r\n                  </NavDropdown>\r\n                  <NavDropdown\r\n                    title={`Heuristic: ${this.state.currentHeuristic}`}\r\n                    id=\"collasible-nav-dropdown\"\r\n                    // style={{ marginRight: 10, fontSize: 25, color: \"#0d6efd\" }}\r\n                  >\r\n                    <NavDropdown.Item\r\n                      onClick={() =>\r\n                        this.setState({ currentHeuristic: \"Manhattan\" })\r\n                      }\r\n                    >\r\n                      Manhattan\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() =>\r\n                        this.setState({ currentHeuristic: \"Euclidean\" })\r\n                      }\r\n                    >\r\n                      Euclidean\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() =>\r\n                        this.setState({ currentHeuristic: \"Octile\" })\r\n                      }\r\n                    >\r\n                      Octile\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item\r\n                      onClick={() =>\r\n                        this.setState({ currentHeuristic: \"Chebyshev\" })\r\n                      }\r\n                    >\r\n                      Chebyshev\r\n                    </NavDropdown.Item>\r\n                  </NavDropdown>\r\n                  <Button\r\n              \r\n                onClick={() => this.visualizeAlgo()}\r\n                // style={{ marginRight: 20, marginLeft: 20, fontSize: 20 }}\r\n              >\r\n                Visualize {this.state.currentAlgo}\r\n              </Button>\r\n                </Nav>\r\n                <Nav></Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {this.state.grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isFinish,\r\n                    isStart,\r\n                    isWall,\r\n                    inPath,\r\n                    inPathFirst,\r\n                    inShortestPath,\r\n                    direction,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      direction={direction}\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      inPath={inPath}\r\n                      inPathFirst={inPathFirst}\r\n                      inShortestPath={inShortestPath}\r\n                      isWall={isFinish || isStart ? false : isWall}\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div class=\"message\" style={{display:this.state.msgDisplay, opacity: this.msgOpacity, fontSize:20}}>Time Taken: {Math.floor(this.state.timeTaken)} ms</div>\r\n        {/* <div className=\"popupContainer\">\r\n            hey i am a popup\r\n          </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = (isClearPath, gridArg, resetWall) => {\r\n  if (isClearPath) {\r\n    let grid = gridArg;\r\n    for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n      for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n        // currentRow.push(createNode(col, row, isClearPath));\r\n\r\n        grid[row][col].isVisited = false;\r\n        if (resetWall){\r\n          grid[row][col].isWall =  false;\r\n        }\r\n        \r\n        grid[row][col].previousNode = null;\r\n        grid[row][col].inPath = false;\r\n        grid[row][col].inPathFirst = false;\r\n        grid[row][col].inShortestPath = false;\r\n        grid[row][col].direction = \"\";\r\n      }\r\n    }\r\n    return grid;\r\n  }\r\n  const grid = [];\r\n  for (let row = 0; row < NUMBER_OF_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COL; col++) {\r\n      currentRow.push(createNode(col, row, isClearPath));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row, isClearPath) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_ROW && col === START_COL,\r\n    isFinish: row === END_ROW && col === END_COLUMN,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    inPath: false,\r\n    inPathFirst: false,\r\n    inShortestPath: false,\r\n    direction: \"\",\r\n  };\r\n};\r\n\r\nconst getNewGridWithTargetChanged = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  newGrid[END_ROW][END_COLUMN].isFinish = false;\r\n  // newGrid[row][col].isWall = false;\r\n  newGrid[row][col].isFinish = true;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithSourceChanged = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  newGrid[START_ROW][START_COL].isStart = false;\r\n  // newGrid[row][col].isWall = false;\r\n  newGrid[row][col].isStart = true;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import './App.css';\nimport PathFinding from \"./PathFindingVisual/PathFinding\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <PathFinding></PathFinding>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}